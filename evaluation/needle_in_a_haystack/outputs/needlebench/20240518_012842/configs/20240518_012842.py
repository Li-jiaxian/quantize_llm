datasets=[
    dict(abbr='Length1000Depth0_origin_en_4k',
        depth=0,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=1000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length1000Depth5_origin_en_4k',
        depth=5,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=1000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length1000Depth10_origin_en_4k',
        depth=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=1000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length1000Depth15_origin_en_4k',
        depth=15,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=1000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length1000Depth21_origin_en_4k',
        depth=21,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=1000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length1000Depth26_origin_en_4k',
        depth=26,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=1000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length1000Depth31_origin_en_4k',
        depth=31,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=1000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length1000Depth36_origin_en_4k',
        depth=36,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=1000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length1000Depth42_origin_en_4k',
        depth=42,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=1000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length1000Depth47_origin_en_4k',
        depth=47,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=1000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length1000Depth52_origin_en_4k',
        depth=52,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=1000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length1000Depth57_origin_en_4k',
        depth=57,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=1000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length1000Depth63_origin_en_4k',
        depth=63,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=1000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length1000Depth68_origin_en_4k',
        depth=68,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=1000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length1000Depth73_origin_en_4k',
        depth=73,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=1000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length1000Depth78_origin_en_4k',
        depth=78,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=1000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length1000Depth84_origin_en_4k',
        depth=84,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=1000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length1000Depth89_origin_en_4k',
        depth=89,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=1000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length1000Depth94_origin_en_4k',
        depth=94,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=1000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length1000Depth100_origin_en_4k',
        depth=100,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=1000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length2000Depth0_origin_en_4k',
        depth=0,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=2000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length2000Depth5_origin_en_4k',
        depth=5,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=2000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length2000Depth10_origin_en_4k',
        depth=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=2000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length2000Depth15_origin_en_4k',
        depth=15,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=2000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length2000Depth21_origin_en_4k',
        depth=21,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=2000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length2000Depth26_origin_en_4k',
        depth=26,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=2000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length2000Depth31_origin_en_4k',
        depth=31,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=2000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length2000Depth36_origin_en_4k',
        depth=36,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=2000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length2000Depth42_origin_en_4k',
        depth=42,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=2000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length2000Depth47_origin_en_4k',
        depth=47,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=2000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length2000Depth52_origin_en_4k',
        depth=52,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=2000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length2000Depth57_origin_en_4k',
        depth=57,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=2000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length2000Depth63_origin_en_4k',
        depth=63,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=2000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length2000Depth68_origin_en_4k',
        depth=68,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=2000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length2000Depth73_origin_en_4k',
        depth=73,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=2000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length2000Depth78_origin_en_4k',
        depth=78,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=2000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length2000Depth84_origin_en_4k',
        depth=84,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=2000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length2000Depth89_origin_en_4k',
        depth=89,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=2000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length2000Depth94_origin_en_4k',
        depth=94,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=2000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length2000Depth100_origin_en_4k',
        depth=100,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=2000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length3000Depth0_origin_en_4k',
        depth=0,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=3000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length3000Depth5_origin_en_4k',
        depth=5,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=3000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length3000Depth10_origin_en_4k',
        depth=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=3000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length3000Depth15_origin_en_4k',
        depth=15,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=3000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length3000Depth21_origin_en_4k',
        depth=21,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=3000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length3000Depth26_origin_en_4k',
        depth=26,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=3000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length3000Depth31_origin_en_4k',
        depth=31,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=3000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length3000Depth36_origin_en_4k',
        depth=36,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=3000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length3000Depth42_origin_en_4k',
        depth=42,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=3000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length3000Depth47_origin_en_4k',
        depth=47,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=3000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length3000Depth52_origin_en_4k',
        depth=52,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=3000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length3000Depth57_origin_en_4k',
        depth=57,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=3000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length3000Depth63_origin_en_4k',
        depth=63,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=3000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length3000Depth68_origin_en_4k',
        depth=68,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=3000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length3000Depth73_origin_en_4k',
        depth=73,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=3000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length3000Depth78_origin_en_4k',
        depth=78,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=3000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length3000Depth84_origin_en_4k',
        depth=84,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=3000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length3000Depth89_origin_en_4k',
        depth=89,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=3000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length3000Depth94_origin_en_4k',
        depth=94,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=3000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length3000Depth100_origin_en_4k',
        depth=100,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=3000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length4000Depth0_origin_en_4k',
        depth=0,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=4000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length4000Depth5_origin_en_4k',
        depth=5,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=4000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length4000Depth10_origin_en_4k',
        depth=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=4000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length4000Depth15_origin_en_4k',
        depth=15,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=4000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length4000Depth21_origin_en_4k',
        depth=21,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=4000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length4000Depth26_origin_en_4k',
        depth=26,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=4000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length4000Depth31_origin_en_4k',
        depth=31,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=4000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length4000Depth36_origin_en_4k',
        depth=36,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=4000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length4000Depth42_origin_en_4k',
        depth=42,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=4000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length4000Depth47_origin_en_4k',
        depth=47,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=4000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length4000Depth52_origin_en_4k',
        depth=52,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=4000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length4000Depth57_origin_en_4k',
        depth=57,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=4000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length4000Depth63_origin_en_4k',
        depth=63,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=4000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length4000Depth68_origin_en_4k',
        depth=68,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=4000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length4000Depth73_origin_en_4k',
        depth=73,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=4000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length4000Depth78_origin_en_4k',
        depth=78,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=4000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length4000Depth84_origin_en_4k',
        depth=84,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=4000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length4000Depth89_origin_en_4k',
        depth=89,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=4000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length4000Depth94_origin_en_4k',
        depth=94,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=4000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length4000Depth100_origin_en_4k',
        depth=100,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=4000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length1000Depth0_origin_en_4k',
        depth=0,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=1000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length1000Depth5_origin_en_4k',
        depth=5,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=1000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length1000Depth10_origin_en_4k',
        depth=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=1000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length1000Depth15_origin_en_4k',
        depth=15,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=1000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length1000Depth21_origin_en_4k',
        depth=21,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=1000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length1000Depth26_origin_en_4k',
        depth=26,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=1000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length1000Depth31_origin_en_4k',
        depth=31,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=1000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length1000Depth36_origin_en_4k',
        depth=36,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=1000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length1000Depth42_origin_en_4k',
        depth=42,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=1000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length1000Depth47_origin_en_4k',
        depth=47,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=1000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length1000Depth52_origin_en_4k',
        depth=52,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=1000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length1000Depth57_origin_en_4k',
        depth=57,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=1000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length1000Depth63_origin_en_4k',
        depth=63,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=1000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length1000Depth68_origin_en_4k',
        depth=68,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=1000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length1000Depth73_origin_en_4k',
        depth=73,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=1000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length1000Depth78_origin_en_4k',
        depth=78,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=1000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length1000Depth84_origin_en_4k',
        depth=84,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=1000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length1000Depth89_origin_en_4k',
        depth=89,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=1000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length1000Depth94_origin_en_4k',
        depth=94,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=1000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length1000Depth100_origin_en_4k',
        depth=100,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=1000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length2000Depth0_origin_en_4k',
        depth=0,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=2000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length2000Depth5_origin_en_4k',
        depth=5,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=2000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length2000Depth10_origin_en_4k',
        depth=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=2000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length2000Depth15_origin_en_4k',
        depth=15,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=2000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length2000Depth21_origin_en_4k',
        depth=21,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=2000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length2000Depth26_origin_en_4k',
        depth=26,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=2000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length2000Depth31_origin_en_4k',
        depth=31,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=2000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length2000Depth36_origin_en_4k',
        depth=36,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=2000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length2000Depth42_origin_en_4k',
        depth=42,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=2000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length2000Depth47_origin_en_4k',
        depth=47,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=2000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length2000Depth52_origin_en_4k',
        depth=52,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=2000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length2000Depth57_origin_en_4k',
        depth=57,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=2000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length2000Depth63_origin_en_4k',
        depth=63,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=2000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length2000Depth68_origin_en_4k',
        depth=68,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=2000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length2000Depth73_origin_en_4k',
        depth=73,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=2000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length2000Depth78_origin_en_4k',
        depth=78,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=2000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length2000Depth84_origin_en_4k',
        depth=84,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=2000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length2000Depth89_origin_en_4k',
        depth=89,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=2000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length2000Depth94_origin_en_4k',
        depth=94,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=2000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length2000Depth100_origin_en_4k',
        depth=100,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=2000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length3000Depth0_origin_en_4k',
        depth=0,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=3000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length3000Depth5_origin_en_4k',
        depth=5,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=3000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length3000Depth10_origin_en_4k',
        depth=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=3000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length3000Depth15_origin_en_4k',
        depth=15,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=3000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length3000Depth21_origin_en_4k',
        depth=21,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=3000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length3000Depth26_origin_en_4k',
        depth=26,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=3000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length3000Depth31_origin_en_4k',
        depth=31,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=3000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length3000Depth36_origin_en_4k',
        depth=36,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=3000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length3000Depth42_origin_en_4k',
        depth=42,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=3000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length3000Depth47_origin_en_4k',
        depth=47,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=3000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length3000Depth52_origin_en_4k',
        depth=52,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=3000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length3000Depth57_origin_en_4k',
        depth=57,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=3000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length3000Depth63_origin_en_4k',
        depth=63,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=3000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length3000Depth68_origin_en_4k',
        depth=68,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=3000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length3000Depth73_origin_en_4k',
        depth=73,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=3000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length3000Depth78_origin_en_4k',
        depth=78,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=3000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length3000Depth84_origin_en_4k',
        depth=84,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=3000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length3000Depth89_origin_en_4k',
        depth=89,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=3000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length3000Depth94_origin_en_4k',
        depth=94,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=3000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length3000Depth100_origin_en_4k',
        depth=100,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=3000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length4000Depth0_origin_en_4k',
        depth=0,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=4000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length4000Depth5_origin_en_4k',
        depth=5,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=4000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length4000Depth10_origin_en_4k',
        depth=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=4000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length4000Depth15_origin_en_4k',
        depth=15,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=4000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length4000Depth21_origin_en_4k',
        depth=21,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=4000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length4000Depth26_origin_en_4k',
        depth=26,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=4000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length4000Depth31_origin_en_4k',
        depth=31,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=4000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length4000Depth36_origin_en_4k',
        depth=36,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=4000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length4000Depth42_origin_en_4k',
        depth=42,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=4000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length4000Depth47_origin_en_4k',
        depth=47,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=4000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length4000Depth52_origin_en_4k',
        depth=52,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=4000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length4000Depth57_origin_en_4k',
        depth=57,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=4000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length4000Depth63_origin_en_4k',
        depth=63,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=4000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length4000Depth68_origin_en_4k',
        depth=68,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=4000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length4000Depth73_origin_en_4k',
        depth=73,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=4000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length4000Depth78_origin_en_4k',
        depth=78,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=4000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length4000Depth84_origin_en_4k',
        depth=84,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=4000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length4000Depth89_origin_en_4k',
        depth=89,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=4000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length4000Depth94_origin_en_4k',
        depth=94,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=4000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length4000Depth100_origin_en_4k',
        depth=100,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=4000,
        length_buffer=600,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='/opt/data/private/ljx/quantize-llm/evaluation/needle_in_a_haystack/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    ]
models=[
    dict(abbr='longchat-7b-hf',
        batch_padding=False,
        batch_size=8,
        max_out_len=450,
        max_seq_len=2048,
        model_kwargs=dict(
            device_map='auto'),
        path='/opt/data/private/hf_models/longchat-7b-16k',
        run_cfg=dict(
            num_gpus=1,
            num_procs=1),
        tokenizer_kwargs=dict(
            padding_side='left',
            truncation_side='left',
            use_fast=False),
        tokenizer_path='/opt/data/private/hf_models/longchat-7b-16k',
        type='opencompass.models.HuggingFaceCausalLM'),
    ]
summarizer=dict(
    dataset_abbrs=[
        'NeedleBench-Overall-Score',
        '--------- NeedleBench-4K-Single-Needle-Retrieval ---------',
        'Single-Needle-Retrieval(S-RT)',
        'Single-Needle-Retrieval-EN',
        'Single-Needle-Retrieval-ZH',
        '--------- NeedleBench-4K-Multi-Needle-Retrieval ---------',
        'Multi-Needle-Retrieval(M-RT)',
        'Multi-Needle-Retrieval-EN',
        'Multi-Needle-Retrieval-ZH',
        '--------- NeedleBench-4K-Multi-Needle-Reasoning ---------',
        'Multi-Needle-Reasoning(M-RS)',
        'Multi-Needle-Reasoning-EN',
        'Multi-Needle-Reasoning-ZH',
        '2-Needle-EN-4K',
        '2-Needle-ZH-4K',
        '3-Needle-EN-4K',
        '3-Needle-ZH-4K',
        '4-Needle-EN-4K',
        '4-Needle-ZH-4K',
        '5-Needle-EN-4K',
        '5-Needle-ZH-4K',
        ],
    summary_groups=[
        dict(name='2-Needle-EN-4K',
            subsets=[
                'Length1000Depth0_2needle_en_4k',
                'Length1000Depth5_2needle_en_4k',
                'Length1000Depth10_2needle_en_4k',
                'Length1000Depth15_2needle_en_4k',
                'Length1000Depth21_2needle_en_4k',
                'Length1000Depth26_2needle_en_4k',
                'Length1000Depth31_2needle_en_4k',
                'Length1000Depth36_2needle_en_4k',
                'Length1000Depth42_2needle_en_4k',
                'Length1000Depth47_2needle_en_4k',
                'Length1000Depth52_2needle_en_4k',
                'Length1000Depth57_2needle_en_4k',
                'Length1000Depth63_2needle_en_4k',
                'Length1000Depth68_2needle_en_4k',
                'Length1000Depth73_2needle_en_4k',
                'Length1000Depth78_2needle_en_4k',
                'Length1000Depth84_2needle_en_4k',
                'Length1000Depth89_2needle_en_4k',
                'Length1000Depth94_2needle_en_4k',
                'Length1000Depth100_2needle_en_4k',
                'Length2000Depth0_2needle_en_4k',
                'Length2000Depth5_2needle_en_4k',
                'Length2000Depth10_2needle_en_4k',
                'Length2000Depth15_2needle_en_4k',
                'Length2000Depth21_2needle_en_4k',
                'Length2000Depth26_2needle_en_4k',
                'Length2000Depth31_2needle_en_4k',
                'Length2000Depth36_2needle_en_4k',
                'Length2000Depth42_2needle_en_4k',
                'Length2000Depth47_2needle_en_4k',
                'Length2000Depth52_2needle_en_4k',
                'Length2000Depth57_2needle_en_4k',
                'Length2000Depth63_2needle_en_4k',
                'Length2000Depth68_2needle_en_4k',
                'Length2000Depth73_2needle_en_4k',
                'Length2000Depth78_2needle_en_4k',
                'Length2000Depth84_2needle_en_4k',
                'Length2000Depth89_2needle_en_4k',
                'Length2000Depth94_2needle_en_4k',
                'Length2000Depth100_2needle_en_4k',
                'Length3000Depth0_2needle_en_4k',
                'Length3000Depth5_2needle_en_4k',
                'Length3000Depth10_2needle_en_4k',
                'Length3000Depth15_2needle_en_4k',
                'Length3000Depth21_2needle_en_4k',
                'Length3000Depth26_2needle_en_4k',
                'Length3000Depth31_2needle_en_4k',
                'Length3000Depth36_2needle_en_4k',
                'Length3000Depth42_2needle_en_4k',
                'Length3000Depth47_2needle_en_4k',
                'Length3000Depth52_2needle_en_4k',
                'Length3000Depth57_2needle_en_4k',
                'Length3000Depth63_2needle_en_4k',
                'Length3000Depth68_2needle_en_4k',
                'Length3000Depth73_2needle_en_4k',
                'Length3000Depth78_2needle_en_4k',
                'Length3000Depth84_2needle_en_4k',
                'Length3000Depth89_2needle_en_4k',
                'Length3000Depth94_2needle_en_4k',
                'Length3000Depth100_2needle_en_4k',
                'Length4000Depth0_2needle_en_4k',
                'Length4000Depth5_2needle_en_4k',
                'Length4000Depth10_2needle_en_4k',
                'Length4000Depth15_2needle_en_4k',
                'Length4000Depth21_2needle_en_4k',
                'Length4000Depth26_2needle_en_4k',
                'Length4000Depth31_2needle_en_4k',
                'Length4000Depth36_2needle_en_4k',
                'Length4000Depth42_2needle_en_4k',
                'Length4000Depth47_2needle_en_4k',
                'Length4000Depth52_2needle_en_4k',
                'Length4000Depth57_2needle_en_4k',
                'Length4000Depth63_2needle_en_4k',
                'Length4000Depth68_2needle_en_4k',
                'Length4000Depth73_2needle_en_4k',
                'Length4000Depth78_2needle_en_4k',
                'Length4000Depth84_2needle_en_4k',
                'Length4000Depth89_2needle_en_4k',
                'Length4000Depth94_2needle_en_4k',
                'Length4000Depth100_2needle_en_4k',
                ]),
        dict(name='2-Needle-ZH-4K',
            subsets=[
                'Length1000Depth0_2needle_zh_4k',
                'Length1000Depth5_2needle_zh_4k',
                'Length1000Depth10_2needle_zh_4k',
                'Length1000Depth15_2needle_zh_4k',
                'Length1000Depth21_2needle_zh_4k',
                'Length1000Depth26_2needle_zh_4k',
                'Length1000Depth31_2needle_zh_4k',
                'Length1000Depth36_2needle_zh_4k',
                'Length1000Depth42_2needle_zh_4k',
                'Length1000Depth47_2needle_zh_4k',
                'Length1000Depth52_2needle_zh_4k',
                'Length1000Depth57_2needle_zh_4k',
                'Length1000Depth63_2needle_zh_4k',
                'Length1000Depth68_2needle_zh_4k',
                'Length1000Depth73_2needle_zh_4k',
                'Length1000Depth78_2needle_zh_4k',
                'Length1000Depth84_2needle_zh_4k',
                'Length1000Depth89_2needle_zh_4k',
                'Length1000Depth94_2needle_zh_4k',
                'Length1000Depth100_2needle_zh_4k',
                'Length2000Depth0_2needle_zh_4k',
                'Length2000Depth5_2needle_zh_4k',
                'Length2000Depth10_2needle_zh_4k',
                'Length2000Depth15_2needle_zh_4k',
                'Length2000Depth21_2needle_zh_4k',
                'Length2000Depth26_2needle_zh_4k',
                'Length2000Depth31_2needle_zh_4k',
                'Length2000Depth36_2needle_zh_4k',
                'Length2000Depth42_2needle_zh_4k',
                'Length2000Depth47_2needle_zh_4k',
                'Length2000Depth52_2needle_zh_4k',
                'Length2000Depth57_2needle_zh_4k',
                'Length2000Depth63_2needle_zh_4k',
                'Length2000Depth68_2needle_zh_4k',
                'Length2000Depth73_2needle_zh_4k',
                'Length2000Depth78_2needle_zh_4k',
                'Length2000Depth84_2needle_zh_4k',
                'Length2000Depth89_2needle_zh_4k',
                'Length2000Depth94_2needle_zh_4k',
                'Length2000Depth100_2needle_zh_4k',
                'Length3000Depth0_2needle_zh_4k',
                'Length3000Depth5_2needle_zh_4k',
                'Length3000Depth10_2needle_zh_4k',
                'Length3000Depth15_2needle_zh_4k',
                'Length3000Depth21_2needle_zh_4k',
                'Length3000Depth26_2needle_zh_4k',
                'Length3000Depth31_2needle_zh_4k',
                'Length3000Depth36_2needle_zh_4k',
                'Length3000Depth42_2needle_zh_4k',
                'Length3000Depth47_2needle_zh_4k',
                'Length3000Depth52_2needle_zh_4k',
                'Length3000Depth57_2needle_zh_4k',
                'Length3000Depth63_2needle_zh_4k',
                'Length3000Depth68_2needle_zh_4k',
                'Length3000Depth73_2needle_zh_4k',
                'Length3000Depth78_2needle_zh_4k',
                'Length3000Depth84_2needle_zh_4k',
                'Length3000Depth89_2needle_zh_4k',
                'Length3000Depth94_2needle_zh_4k',
                'Length3000Depth100_2needle_zh_4k',
                'Length4000Depth0_2needle_zh_4k',
                'Length4000Depth5_2needle_zh_4k',
                'Length4000Depth10_2needle_zh_4k',
                'Length4000Depth15_2needle_zh_4k',
                'Length4000Depth21_2needle_zh_4k',
                'Length4000Depth26_2needle_zh_4k',
                'Length4000Depth31_2needle_zh_4k',
                'Length4000Depth36_2needle_zh_4k',
                'Length4000Depth42_2needle_zh_4k',
                'Length4000Depth47_2needle_zh_4k',
                'Length4000Depth52_2needle_zh_4k',
                'Length4000Depth57_2needle_zh_4k',
                'Length4000Depth63_2needle_zh_4k',
                'Length4000Depth68_2needle_zh_4k',
                'Length4000Depth73_2needle_zh_4k',
                'Length4000Depth78_2needle_zh_4k',
                'Length4000Depth84_2needle_zh_4k',
                'Length4000Depth89_2needle_zh_4k',
                'Length4000Depth94_2needle_zh_4k',
                'Length4000Depth100_2needle_zh_4k',
                ]),
        dict(name='3-Needle-EN-4K',
            subsets=[
                'Length1000Depth0_3needle_en_4k',
                'Length1000Depth5_3needle_en_4k',
                'Length1000Depth10_3needle_en_4k',
                'Length1000Depth15_3needle_en_4k',
                'Length1000Depth21_3needle_en_4k',
                'Length1000Depth26_3needle_en_4k',
                'Length1000Depth31_3needle_en_4k',
                'Length1000Depth36_3needle_en_4k',
                'Length1000Depth42_3needle_en_4k',
                'Length1000Depth47_3needle_en_4k',
                'Length1000Depth52_3needle_en_4k',
                'Length1000Depth57_3needle_en_4k',
                'Length1000Depth63_3needle_en_4k',
                'Length1000Depth68_3needle_en_4k',
                'Length1000Depth73_3needle_en_4k',
                'Length1000Depth78_3needle_en_4k',
                'Length1000Depth84_3needle_en_4k',
                'Length1000Depth89_3needle_en_4k',
                'Length1000Depth94_3needle_en_4k',
                'Length1000Depth100_3needle_en_4k',
                'Length2000Depth0_3needle_en_4k',
                'Length2000Depth5_3needle_en_4k',
                'Length2000Depth10_3needle_en_4k',
                'Length2000Depth15_3needle_en_4k',
                'Length2000Depth21_3needle_en_4k',
                'Length2000Depth26_3needle_en_4k',
                'Length2000Depth31_3needle_en_4k',
                'Length2000Depth36_3needle_en_4k',
                'Length2000Depth42_3needle_en_4k',
                'Length2000Depth47_3needle_en_4k',
                'Length2000Depth52_3needle_en_4k',
                'Length2000Depth57_3needle_en_4k',
                'Length2000Depth63_3needle_en_4k',
                'Length2000Depth68_3needle_en_4k',
                'Length2000Depth73_3needle_en_4k',
                'Length2000Depth78_3needle_en_4k',
                'Length2000Depth84_3needle_en_4k',
                'Length2000Depth89_3needle_en_4k',
                'Length2000Depth94_3needle_en_4k',
                'Length2000Depth100_3needle_en_4k',
                'Length3000Depth0_3needle_en_4k',
                'Length3000Depth5_3needle_en_4k',
                'Length3000Depth10_3needle_en_4k',
                'Length3000Depth15_3needle_en_4k',
                'Length3000Depth21_3needle_en_4k',
                'Length3000Depth26_3needle_en_4k',
                'Length3000Depth31_3needle_en_4k',
                'Length3000Depth36_3needle_en_4k',
                'Length3000Depth42_3needle_en_4k',
                'Length3000Depth47_3needle_en_4k',
                'Length3000Depth52_3needle_en_4k',
                'Length3000Depth57_3needle_en_4k',
                'Length3000Depth63_3needle_en_4k',
                'Length3000Depth68_3needle_en_4k',
                'Length3000Depth73_3needle_en_4k',
                'Length3000Depth78_3needle_en_4k',
                'Length3000Depth84_3needle_en_4k',
                'Length3000Depth89_3needle_en_4k',
                'Length3000Depth94_3needle_en_4k',
                'Length3000Depth100_3needle_en_4k',
                'Length4000Depth0_3needle_en_4k',
                'Length4000Depth5_3needle_en_4k',
                'Length4000Depth10_3needle_en_4k',
                'Length4000Depth15_3needle_en_4k',
                'Length4000Depth21_3needle_en_4k',
                'Length4000Depth26_3needle_en_4k',
                'Length4000Depth31_3needle_en_4k',
                'Length4000Depth36_3needle_en_4k',
                'Length4000Depth42_3needle_en_4k',
                'Length4000Depth47_3needle_en_4k',
                'Length4000Depth52_3needle_en_4k',
                'Length4000Depth57_3needle_en_4k',
                'Length4000Depth63_3needle_en_4k',
                'Length4000Depth68_3needle_en_4k',
                'Length4000Depth73_3needle_en_4k',
                'Length4000Depth78_3needle_en_4k',
                'Length4000Depth84_3needle_en_4k',
                'Length4000Depth89_3needle_en_4k',
                'Length4000Depth94_3needle_en_4k',
                'Length4000Depth100_3needle_en_4k',
                ]),
        dict(name='3-Needle-ZH-4K',
            subsets=[
                'Length1000Depth0_3needle_zh_4k',
                'Length1000Depth5_3needle_zh_4k',
                'Length1000Depth10_3needle_zh_4k',
                'Length1000Depth15_3needle_zh_4k',
                'Length1000Depth21_3needle_zh_4k',
                'Length1000Depth26_3needle_zh_4k',
                'Length1000Depth31_3needle_zh_4k',
                'Length1000Depth36_3needle_zh_4k',
                'Length1000Depth42_3needle_zh_4k',
                'Length1000Depth47_3needle_zh_4k',
                'Length1000Depth52_3needle_zh_4k',
                'Length1000Depth57_3needle_zh_4k',
                'Length1000Depth63_3needle_zh_4k',
                'Length1000Depth68_3needle_zh_4k',
                'Length1000Depth73_3needle_zh_4k',
                'Length1000Depth78_3needle_zh_4k',
                'Length1000Depth84_3needle_zh_4k',
                'Length1000Depth89_3needle_zh_4k',
                'Length1000Depth94_3needle_zh_4k',
                'Length1000Depth100_3needle_zh_4k',
                'Length2000Depth0_3needle_zh_4k',
                'Length2000Depth5_3needle_zh_4k',
                'Length2000Depth10_3needle_zh_4k',
                'Length2000Depth15_3needle_zh_4k',
                'Length2000Depth21_3needle_zh_4k',
                'Length2000Depth26_3needle_zh_4k',
                'Length2000Depth31_3needle_zh_4k',
                'Length2000Depth36_3needle_zh_4k',
                'Length2000Depth42_3needle_zh_4k',
                'Length2000Depth47_3needle_zh_4k',
                'Length2000Depth52_3needle_zh_4k',
                'Length2000Depth57_3needle_zh_4k',
                'Length2000Depth63_3needle_zh_4k',
                'Length2000Depth68_3needle_zh_4k',
                'Length2000Depth73_3needle_zh_4k',
                'Length2000Depth78_3needle_zh_4k',
                'Length2000Depth84_3needle_zh_4k',
                'Length2000Depth89_3needle_zh_4k',
                'Length2000Depth94_3needle_zh_4k',
                'Length2000Depth100_3needle_zh_4k',
                'Length3000Depth0_3needle_zh_4k',
                'Length3000Depth5_3needle_zh_4k',
                'Length3000Depth10_3needle_zh_4k',
                'Length3000Depth15_3needle_zh_4k',
                'Length3000Depth21_3needle_zh_4k',
                'Length3000Depth26_3needle_zh_4k',
                'Length3000Depth31_3needle_zh_4k',
                'Length3000Depth36_3needle_zh_4k',
                'Length3000Depth42_3needle_zh_4k',
                'Length3000Depth47_3needle_zh_4k',
                'Length3000Depth52_3needle_zh_4k',
                'Length3000Depth57_3needle_zh_4k',
                'Length3000Depth63_3needle_zh_4k',
                'Length3000Depth68_3needle_zh_4k',
                'Length3000Depth73_3needle_zh_4k',
                'Length3000Depth78_3needle_zh_4k',
                'Length3000Depth84_3needle_zh_4k',
                'Length3000Depth89_3needle_zh_4k',
                'Length3000Depth94_3needle_zh_4k',
                'Length3000Depth100_3needle_zh_4k',
                'Length4000Depth0_3needle_zh_4k',
                'Length4000Depth5_3needle_zh_4k',
                'Length4000Depth10_3needle_zh_4k',
                'Length4000Depth15_3needle_zh_4k',
                'Length4000Depth21_3needle_zh_4k',
                'Length4000Depth26_3needle_zh_4k',
                'Length4000Depth31_3needle_zh_4k',
                'Length4000Depth36_3needle_zh_4k',
                'Length4000Depth42_3needle_zh_4k',
                'Length4000Depth47_3needle_zh_4k',
                'Length4000Depth52_3needle_zh_4k',
                'Length4000Depth57_3needle_zh_4k',
                'Length4000Depth63_3needle_zh_4k',
                'Length4000Depth68_3needle_zh_4k',
                'Length4000Depth73_3needle_zh_4k',
                'Length4000Depth78_3needle_zh_4k',
                'Length4000Depth84_3needle_zh_4k',
                'Length4000Depth89_3needle_zh_4k',
                'Length4000Depth94_3needle_zh_4k',
                'Length4000Depth100_3needle_zh_4k',
                ]),
        dict(name='4-Needle-EN-4K',
            subsets=[
                'Length1000Depth0_4needle_en_4k',
                'Length1000Depth5_4needle_en_4k',
                'Length1000Depth10_4needle_en_4k',
                'Length1000Depth15_4needle_en_4k',
                'Length1000Depth21_4needle_en_4k',
                'Length1000Depth26_4needle_en_4k',
                'Length1000Depth31_4needle_en_4k',
                'Length1000Depth36_4needle_en_4k',
                'Length1000Depth42_4needle_en_4k',
                'Length1000Depth47_4needle_en_4k',
                'Length1000Depth52_4needle_en_4k',
                'Length1000Depth57_4needle_en_4k',
                'Length1000Depth63_4needle_en_4k',
                'Length1000Depth68_4needle_en_4k',
                'Length1000Depth73_4needle_en_4k',
                'Length1000Depth78_4needle_en_4k',
                'Length1000Depth84_4needle_en_4k',
                'Length1000Depth89_4needle_en_4k',
                'Length1000Depth94_4needle_en_4k',
                'Length1000Depth100_4needle_en_4k',
                'Length2000Depth0_4needle_en_4k',
                'Length2000Depth5_4needle_en_4k',
                'Length2000Depth10_4needle_en_4k',
                'Length2000Depth15_4needle_en_4k',
                'Length2000Depth21_4needle_en_4k',
                'Length2000Depth26_4needle_en_4k',
                'Length2000Depth31_4needle_en_4k',
                'Length2000Depth36_4needle_en_4k',
                'Length2000Depth42_4needle_en_4k',
                'Length2000Depth47_4needle_en_4k',
                'Length2000Depth52_4needle_en_4k',
                'Length2000Depth57_4needle_en_4k',
                'Length2000Depth63_4needle_en_4k',
                'Length2000Depth68_4needle_en_4k',
                'Length2000Depth73_4needle_en_4k',
                'Length2000Depth78_4needle_en_4k',
                'Length2000Depth84_4needle_en_4k',
                'Length2000Depth89_4needle_en_4k',
                'Length2000Depth94_4needle_en_4k',
                'Length2000Depth100_4needle_en_4k',
                'Length3000Depth0_4needle_en_4k',
                'Length3000Depth5_4needle_en_4k',
                'Length3000Depth10_4needle_en_4k',
                'Length3000Depth15_4needle_en_4k',
                'Length3000Depth21_4needle_en_4k',
                'Length3000Depth26_4needle_en_4k',
                'Length3000Depth31_4needle_en_4k',
                'Length3000Depth36_4needle_en_4k',
                'Length3000Depth42_4needle_en_4k',
                'Length3000Depth47_4needle_en_4k',
                'Length3000Depth52_4needle_en_4k',
                'Length3000Depth57_4needle_en_4k',
                'Length3000Depth63_4needle_en_4k',
                'Length3000Depth68_4needle_en_4k',
                'Length3000Depth73_4needle_en_4k',
                'Length3000Depth78_4needle_en_4k',
                'Length3000Depth84_4needle_en_4k',
                'Length3000Depth89_4needle_en_4k',
                'Length3000Depth94_4needle_en_4k',
                'Length3000Depth100_4needle_en_4k',
                'Length4000Depth0_4needle_en_4k',
                'Length4000Depth5_4needle_en_4k',
                'Length4000Depth10_4needle_en_4k',
                'Length4000Depth15_4needle_en_4k',
                'Length4000Depth21_4needle_en_4k',
                'Length4000Depth26_4needle_en_4k',
                'Length4000Depth31_4needle_en_4k',
                'Length4000Depth36_4needle_en_4k',
                'Length4000Depth42_4needle_en_4k',
                'Length4000Depth47_4needle_en_4k',
                'Length4000Depth52_4needle_en_4k',
                'Length4000Depth57_4needle_en_4k',
                'Length4000Depth63_4needle_en_4k',
                'Length4000Depth68_4needle_en_4k',
                'Length4000Depth73_4needle_en_4k',
                'Length4000Depth78_4needle_en_4k',
                'Length4000Depth84_4needle_en_4k',
                'Length4000Depth89_4needle_en_4k',
                'Length4000Depth94_4needle_en_4k',
                'Length4000Depth100_4needle_en_4k',
                ]),
        dict(name='4-Needle-ZH-4K',
            subsets=[
                'Length1000Depth0_4needle_zh_4k',
                'Length1000Depth5_4needle_zh_4k',
                'Length1000Depth10_4needle_zh_4k',
                'Length1000Depth15_4needle_zh_4k',
                'Length1000Depth21_4needle_zh_4k',
                'Length1000Depth26_4needle_zh_4k',
                'Length1000Depth31_4needle_zh_4k',
                'Length1000Depth36_4needle_zh_4k',
                'Length1000Depth42_4needle_zh_4k',
                'Length1000Depth47_4needle_zh_4k',
                'Length1000Depth52_4needle_zh_4k',
                'Length1000Depth57_4needle_zh_4k',
                'Length1000Depth63_4needle_zh_4k',
                'Length1000Depth68_4needle_zh_4k',
                'Length1000Depth73_4needle_zh_4k',
                'Length1000Depth78_4needle_zh_4k',
                'Length1000Depth84_4needle_zh_4k',
                'Length1000Depth89_4needle_zh_4k',
                'Length1000Depth94_4needle_zh_4k',
                'Length1000Depth100_4needle_zh_4k',
                'Length2000Depth0_4needle_zh_4k',
                'Length2000Depth5_4needle_zh_4k',
                'Length2000Depth10_4needle_zh_4k',
                'Length2000Depth15_4needle_zh_4k',
                'Length2000Depth21_4needle_zh_4k',
                'Length2000Depth26_4needle_zh_4k',
                'Length2000Depth31_4needle_zh_4k',
                'Length2000Depth36_4needle_zh_4k',
                'Length2000Depth42_4needle_zh_4k',
                'Length2000Depth47_4needle_zh_4k',
                'Length2000Depth52_4needle_zh_4k',
                'Length2000Depth57_4needle_zh_4k',
                'Length2000Depth63_4needle_zh_4k',
                'Length2000Depth68_4needle_zh_4k',
                'Length2000Depth73_4needle_zh_4k',
                'Length2000Depth78_4needle_zh_4k',
                'Length2000Depth84_4needle_zh_4k',
                'Length2000Depth89_4needle_zh_4k',
                'Length2000Depth94_4needle_zh_4k',
                'Length2000Depth100_4needle_zh_4k',
                'Length3000Depth0_4needle_zh_4k',
                'Length3000Depth5_4needle_zh_4k',
                'Length3000Depth10_4needle_zh_4k',
                'Length3000Depth15_4needle_zh_4k',
                'Length3000Depth21_4needle_zh_4k',
                'Length3000Depth26_4needle_zh_4k',
                'Length3000Depth31_4needle_zh_4k',
                'Length3000Depth36_4needle_zh_4k',
                'Length3000Depth42_4needle_zh_4k',
                'Length3000Depth47_4needle_zh_4k',
                'Length3000Depth52_4needle_zh_4k',
                'Length3000Depth57_4needle_zh_4k',
                'Length3000Depth63_4needle_zh_4k',
                'Length3000Depth68_4needle_zh_4k',
                'Length3000Depth73_4needle_zh_4k',
                'Length3000Depth78_4needle_zh_4k',
                'Length3000Depth84_4needle_zh_4k',
                'Length3000Depth89_4needle_zh_4k',
                'Length3000Depth94_4needle_zh_4k',
                'Length3000Depth100_4needle_zh_4k',
                'Length4000Depth0_4needle_zh_4k',
                'Length4000Depth5_4needle_zh_4k',
                'Length4000Depth10_4needle_zh_4k',
                'Length4000Depth15_4needle_zh_4k',
                'Length4000Depth21_4needle_zh_4k',
                'Length4000Depth26_4needle_zh_4k',
                'Length4000Depth31_4needle_zh_4k',
                'Length4000Depth36_4needle_zh_4k',
                'Length4000Depth42_4needle_zh_4k',
                'Length4000Depth47_4needle_zh_4k',
                'Length4000Depth52_4needle_zh_4k',
                'Length4000Depth57_4needle_zh_4k',
                'Length4000Depth63_4needle_zh_4k',
                'Length4000Depth68_4needle_zh_4k',
                'Length4000Depth73_4needle_zh_4k',
                'Length4000Depth78_4needle_zh_4k',
                'Length4000Depth84_4needle_zh_4k',
                'Length4000Depth89_4needle_zh_4k',
                'Length4000Depth94_4needle_zh_4k',
                'Length4000Depth100_4needle_zh_4k',
                ]),
        dict(name='5-Needle-EN-4K',
            subsets=[
                'Length1000Depth0_5needle_en_4k',
                'Length1000Depth5_5needle_en_4k',
                'Length1000Depth10_5needle_en_4k',
                'Length1000Depth15_5needle_en_4k',
                'Length1000Depth21_5needle_en_4k',
                'Length1000Depth26_5needle_en_4k',
                'Length1000Depth31_5needle_en_4k',
                'Length1000Depth36_5needle_en_4k',
                'Length1000Depth42_5needle_en_4k',
                'Length1000Depth47_5needle_en_4k',
                'Length1000Depth52_5needle_en_4k',
                'Length1000Depth57_5needle_en_4k',
                'Length1000Depth63_5needle_en_4k',
                'Length1000Depth68_5needle_en_4k',
                'Length1000Depth73_5needle_en_4k',
                'Length1000Depth78_5needle_en_4k',
                'Length1000Depth84_5needle_en_4k',
                'Length1000Depth89_5needle_en_4k',
                'Length1000Depth94_5needle_en_4k',
                'Length1000Depth100_5needle_en_4k',
                'Length2000Depth0_5needle_en_4k',
                'Length2000Depth5_5needle_en_4k',
                'Length2000Depth10_5needle_en_4k',
                'Length2000Depth15_5needle_en_4k',
                'Length2000Depth21_5needle_en_4k',
                'Length2000Depth26_5needle_en_4k',
                'Length2000Depth31_5needle_en_4k',
                'Length2000Depth36_5needle_en_4k',
                'Length2000Depth42_5needle_en_4k',
                'Length2000Depth47_5needle_en_4k',
                'Length2000Depth52_5needle_en_4k',
                'Length2000Depth57_5needle_en_4k',
                'Length2000Depth63_5needle_en_4k',
                'Length2000Depth68_5needle_en_4k',
                'Length2000Depth73_5needle_en_4k',
                'Length2000Depth78_5needle_en_4k',
                'Length2000Depth84_5needle_en_4k',
                'Length2000Depth89_5needle_en_4k',
                'Length2000Depth94_5needle_en_4k',
                'Length2000Depth100_5needle_en_4k',
                'Length3000Depth0_5needle_en_4k',
                'Length3000Depth5_5needle_en_4k',
                'Length3000Depth10_5needle_en_4k',
                'Length3000Depth15_5needle_en_4k',
                'Length3000Depth21_5needle_en_4k',
                'Length3000Depth26_5needle_en_4k',
                'Length3000Depth31_5needle_en_4k',
                'Length3000Depth36_5needle_en_4k',
                'Length3000Depth42_5needle_en_4k',
                'Length3000Depth47_5needle_en_4k',
                'Length3000Depth52_5needle_en_4k',
                'Length3000Depth57_5needle_en_4k',
                'Length3000Depth63_5needle_en_4k',
                'Length3000Depth68_5needle_en_4k',
                'Length3000Depth73_5needle_en_4k',
                'Length3000Depth78_5needle_en_4k',
                'Length3000Depth84_5needle_en_4k',
                'Length3000Depth89_5needle_en_4k',
                'Length3000Depth94_5needle_en_4k',
                'Length3000Depth100_5needle_en_4k',
                'Length4000Depth0_5needle_en_4k',
                'Length4000Depth5_5needle_en_4k',
                'Length4000Depth10_5needle_en_4k',
                'Length4000Depth15_5needle_en_4k',
                'Length4000Depth21_5needle_en_4k',
                'Length4000Depth26_5needle_en_4k',
                'Length4000Depth31_5needle_en_4k',
                'Length4000Depth36_5needle_en_4k',
                'Length4000Depth42_5needle_en_4k',
                'Length4000Depth47_5needle_en_4k',
                'Length4000Depth52_5needle_en_4k',
                'Length4000Depth57_5needle_en_4k',
                'Length4000Depth63_5needle_en_4k',
                'Length4000Depth68_5needle_en_4k',
                'Length4000Depth73_5needle_en_4k',
                'Length4000Depth78_5needle_en_4k',
                'Length4000Depth84_5needle_en_4k',
                'Length4000Depth89_5needle_en_4k',
                'Length4000Depth94_5needle_en_4k',
                'Length4000Depth100_5needle_en_4k',
                ]),
        dict(name='5-Needle-ZH-4K',
            subsets=[
                'Length1000Depth0_5needle_zh_4k',
                'Length1000Depth5_5needle_zh_4k',
                'Length1000Depth10_5needle_zh_4k',
                'Length1000Depth15_5needle_zh_4k',
                'Length1000Depth21_5needle_zh_4k',
                'Length1000Depth26_5needle_zh_4k',
                'Length1000Depth31_5needle_zh_4k',
                'Length1000Depth36_5needle_zh_4k',
                'Length1000Depth42_5needle_zh_4k',
                'Length1000Depth47_5needle_zh_4k',
                'Length1000Depth52_5needle_zh_4k',
                'Length1000Depth57_5needle_zh_4k',
                'Length1000Depth63_5needle_zh_4k',
                'Length1000Depth68_5needle_zh_4k',
                'Length1000Depth73_5needle_zh_4k',
                'Length1000Depth78_5needle_zh_4k',
                'Length1000Depth84_5needle_zh_4k',
                'Length1000Depth89_5needle_zh_4k',
                'Length1000Depth94_5needle_zh_4k',
                'Length1000Depth100_5needle_zh_4k',
                'Length2000Depth0_5needle_zh_4k',
                'Length2000Depth5_5needle_zh_4k',
                'Length2000Depth10_5needle_zh_4k',
                'Length2000Depth15_5needle_zh_4k',
                'Length2000Depth21_5needle_zh_4k',
                'Length2000Depth26_5needle_zh_4k',
                'Length2000Depth31_5needle_zh_4k',
                'Length2000Depth36_5needle_zh_4k',
                'Length2000Depth42_5needle_zh_4k',
                'Length2000Depth47_5needle_zh_4k',
                'Length2000Depth52_5needle_zh_4k',
                'Length2000Depth57_5needle_zh_4k',
                'Length2000Depth63_5needle_zh_4k',
                'Length2000Depth68_5needle_zh_4k',
                'Length2000Depth73_5needle_zh_4k',
                'Length2000Depth78_5needle_zh_4k',
                'Length2000Depth84_5needle_zh_4k',
                'Length2000Depth89_5needle_zh_4k',
                'Length2000Depth94_5needle_zh_4k',
                'Length2000Depth100_5needle_zh_4k',
                'Length3000Depth0_5needle_zh_4k',
                'Length3000Depth5_5needle_zh_4k',
                'Length3000Depth10_5needle_zh_4k',
                'Length3000Depth15_5needle_zh_4k',
                'Length3000Depth21_5needle_zh_4k',
                'Length3000Depth26_5needle_zh_4k',
                'Length3000Depth31_5needle_zh_4k',
                'Length3000Depth36_5needle_zh_4k',
                'Length3000Depth42_5needle_zh_4k',
                'Length3000Depth47_5needle_zh_4k',
                'Length3000Depth52_5needle_zh_4k',
                'Length3000Depth57_5needle_zh_4k',
                'Length3000Depth63_5needle_zh_4k',
                'Length3000Depth68_5needle_zh_4k',
                'Length3000Depth73_5needle_zh_4k',
                'Length3000Depth78_5needle_zh_4k',
                'Length3000Depth84_5needle_zh_4k',
                'Length3000Depth89_5needle_zh_4k',
                'Length3000Depth94_5needle_zh_4k',
                'Length3000Depth100_5needle_zh_4k',
                'Length4000Depth0_5needle_zh_4k',
                'Length4000Depth5_5needle_zh_4k',
                'Length4000Depth10_5needle_zh_4k',
                'Length4000Depth15_5needle_zh_4k',
                'Length4000Depth21_5needle_zh_4k',
                'Length4000Depth26_5needle_zh_4k',
                'Length4000Depth31_5needle_zh_4k',
                'Length4000Depth36_5needle_zh_4k',
                'Length4000Depth42_5needle_zh_4k',
                'Length4000Depth47_5needle_zh_4k',
                'Length4000Depth52_5needle_zh_4k',
                'Length4000Depth57_5needle_zh_4k',
                'Length4000Depth63_5needle_zh_4k',
                'Length4000Depth68_5needle_zh_4k',
                'Length4000Depth73_5needle_zh_4k',
                'Length4000Depth78_5needle_zh_4k',
                'Length4000Depth84_5needle_zh_4k',
                'Length4000Depth89_5needle_zh_4k',
                'Length4000Depth94_5needle_zh_4k',
                'Length4000Depth100_5needle_zh_4k',
                ]),
        dict(name='Multi-Needle-Reasoning(M-RS)',
            subsets=[
                'Length1000Depth0_2needle_en_4k',
                'Length1000Depth5_2needle_en_4k',
                'Length1000Depth10_2needle_en_4k',
                'Length1000Depth15_2needle_en_4k',
                'Length1000Depth21_2needle_en_4k',
                'Length1000Depth26_2needle_en_4k',
                'Length1000Depth31_2needle_en_4k',
                'Length1000Depth36_2needle_en_4k',
                'Length1000Depth42_2needle_en_4k',
                'Length1000Depth47_2needle_en_4k',
                'Length1000Depth52_2needle_en_4k',
                'Length1000Depth57_2needle_en_4k',
                'Length1000Depth63_2needle_en_4k',
                'Length1000Depth68_2needle_en_4k',
                'Length1000Depth73_2needle_en_4k',
                'Length1000Depth78_2needle_en_4k',
                'Length1000Depth84_2needle_en_4k',
                'Length1000Depth89_2needle_en_4k',
                'Length1000Depth94_2needle_en_4k',
                'Length1000Depth100_2needle_en_4k',
                'Length2000Depth0_2needle_en_4k',
                'Length2000Depth5_2needle_en_4k',
                'Length2000Depth10_2needle_en_4k',
                'Length2000Depth15_2needle_en_4k',
                'Length2000Depth21_2needle_en_4k',
                'Length2000Depth26_2needle_en_4k',
                'Length2000Depth31_2needle_en_4k',
                'Length2000Depth36_2needle_en_4k',
                'Length2000Depth42_2needle_en_4k',
                'Length2000Depth47_2needle_en_4k',
                'Length2000Depth52_2needle_en_4k',
                'Length2000Depth57_2needle_en_4k',
                'Length2000Depth63_2needle_en_4k',
                'Length2000Depth68_2needle_en_4k',
                'Length2000Depth73_2needle_en_4k',
                'Length2000Depth78_2needle_en_4k',
                'Length2000Depth84_2needle_en_4k',
                'Length2000Depth89_2needle_en_4k',
                'Length2000Depth94_2needle_en_4k',
                'Length2000Depth100_2needle_en_4k',
                'Length3000Depth0_2needle_en_4k',
                'Length3000Depth5_2needle_en_4k',
                'Length3000Depth10_2needle_en_4k',
                'Length3000Depth15_2needle_en_4k',
                'Length3000Depth21_2needle_en_4k',
                'Length3000Depth26_2needle_en_4k',
                'Length3000Depth31_2needle_en_4k',
                'Length3000Depth36_2needle_en_4k',
                'Length3000Depth42_2needle_en_4k',
                'Length3000Depth47_2needle_en_4k',
                'Length3000Depth52_2needle_en_4k',
                'Length3000Depth57_2needle_en_4k',
                'Length3000Depth63_2needle_en_4k',
                'Length3000Depth68_2needle_en_4k',
                'Length3000Depth73_2needle_en_4k',
                'Length3000Depth78_2needle_en_4k',
                'Length3000Depth84_2needle_en_4k',
                'Length3000Depth89_2needle_en_4k',
                'Length3000Depth94_2needle_en_4k',
                'Length3000Depth100_2needle_en_4k',
                'Length4000Depth0_2needle_en_4k',
                'Length4000Depth5_2needle_en_4k',
                'Length4000Depth10_2needle_en_4k',
                'Length4000Depth15_2needle_en_4k',
                'Length4000Depth21_2needle_en_4k',
                'Length4000Depth26_2needle_en_4k',
                'Length4000Depth31_2needle_en_4k',
                'Length4000Depth36_2needle_en_4k',
                'Length4000Depth42_2needle_en_4k',
                'Length4000Depth47_2needle_en_4k',
                'Length4000Depth52_2needle_en_4k',
                'Length4000Depth57_2needle_en_4k',
                'Length4000Depth63_2needle_en_4k',
                'Length4000Depth68_2needle_en_4k',
                'Length4000Depth73_2needle_en_4k',
                'Length4000Depth78_2needle_en_4k',
                'Length4000Depth84_2needle_en_4k',
                'Length4000Depth89_2needle_en_4k',
                'Length4000Depth94_2needle_en_4k',
                'Length4000Depth100_2needle_en_4k',
                'Length1000Depth0_2needle_zh_4k',
                'Length1000Depth5_2needle_zh_4k',
                'Length1000Depth10_2needle_zh_4k',
                'Length1000Depth15_2needle_zh_4k',
                'Length1000Depth21_2needle_zh_4k',
                'Length1000Depth26_2needle_zh_4k',
                'Length1000Depth31_2needle_zh_4k',
                'Length1000Depth36_2needle_zh_4k',
                'Length1000Depth42_2needle_zh_4k',
                'Length1000Depth47_2needle_zh_4k',
                'Length1000Depth52_2needle_zh_4k',
                'Length1000Depth57_2needle_zh_4k',
                'Length1000Depth63_2needle_zh_4k',
                'Length1000Depth68_2needle_zh_4k',
                'Length1000Depth73_2needle_zh_4k',
                'Length1000Depth78_2needle_zh_4k',
                'Length1000Depth84_2needle_zh_4k',
                'Length1000Depth89_2needle_zh_4k',
                'Length1000Depth94_2needle_zh_4k',
                'Length1000Depth100_2needle_zh_4k',
                'Length2000Depth0_2needle_zh_4k',
                'Length2000Depth5_2needle_zh_4k',
                'Length2000Depth10_2needle_zh_4k',
                'Length2000Depth15_2needle_zh_4k',
                'Length2000Depth21_2needle_zh_4k',
                'Length2000Depth26_2needle_zh_4k',
                'Length2000Depth31_2needle_zh_4k',
                'Length2000Depth36_2needle_zh_4k',
                'Length2000Depth42_2needle_zh_4k',
                'Length2000Depth47_2needle_zh_4k',
                'Length2000Depth52_2needle_zh_4k',
                'Length2000Depth57_2needle_zh_4k',
                'Length2000Depth63_2needle_zh_4k',
                'Length2000Depth68_2needle_zh_4k',
                'Length2000Depth73_2needle_zh_4k',
                'Length2000Depth78_2needle_zh_4k',
                'Length2000Depth84_2needle_zh_4k',
                'Length2000Depth89_2needle_zh_4k',
                'Length2000Depth94_2needle_zh_4k',
                'Length2000Depth100_2needle_zh_4k',
                'Length3000Depth0_2needle_zh_4k',
                'Length3000Depth5_2needle_zh_4k',
                'Length3000Depth10_2needle_zh_4k',
                'Length3000Depth15_2needle_zh_4k',
                'Length3000Depth21_2needle_zh_4k',
                'Length3000Depth26_2needle_zh_4k',
                'Length3000Depth31_2needle_zh_4k',
                'Length3000Depth36_2needle_zh_4k',
                'Length3000Depth42_2needle_zh_4k',
                'Length3000Depth47_2needle_zh_4k',
                'Length3000Depth52_2needle_zh_4k',
                'Length3000Depth57_2needle_zh_4k',
                'Length3000Depth63_2needle_zh_4k',
                'Length3000Depth68_2needle_zh_4k',
                'Length3000Depth73_2needle_zh_4k',
                'Length3000Depth78_2needle_zh_4k',
                'Length3000Depth84_2needle_zh_4k',
                'Length3000Depth89_2needle_zh_4k',
                'Length3000Depth94_2needle_zh_4k',
                'Length3000Depth100_2needle_zh_4k',
                'Length4000Depth0_2needle_zh_4k',
                'Length4000Depth5_2needle_zh_4k',
                'Length4000Depth10_2needle_zh_4k',
                'Length4000Depth15_2needle_zh_4k',
                'Length4000Depth21_2needle_zh_4k',
                'Length4000Depth26_2needle_zh_4k',
                'Length4000Depth31_2needle_zh_4k',
                'Length4000Depth36_2needle_zh_4k',
                'Length4000Depth42_2needle_zh_4k',
                'Length4000Depth47_2needle_zh_4k',
                'Length4000Depth52_2needle_zh_4k',
                'Length4000Depth57_2needle_zh_4k',
                'Length4000Depth63_2needle_zh_4k',
                'Length4000Depth68_2needle_zh_4k',
                'Length4000Depth73_2needle_zh_4k',
                'Length4000Depth78_2needle_zh_4k',
                'Length4000Depth84_2needle_zh_4k',
                'Length4000Depth89_2needle_zh_4k',
                'Length4000Depth94_2needle_zh_4k',
                'Length4000Depth100_2needle_zh_4k',
                'Length1000Depth0_3needle_en_4k',
                'Length1000Depth5_3needle_en_4k',
                'Length1000Depth10_3needle_en_4k',
                'Length1000Depth15_3needle_en_4k',
                'Length1000Depth21_3needle_en_4k',
                'Length1000Depth26_3needle_en_4k',
                'Length1000Depth31_3needle_en_4k',
                'Length1000Depth36_3needle_en_4k',
                'Length1000Depth42_3needle_en_4k',
                'Length1000Depth47_3needle_en_4k',
                'Length1000Depth52_3needle_en_4k',
                'Length1000Depth57_3needle_en_4k',
                'Length1000Depth63_3needle_en_4k',
                'Length1000Depth68_3needle_en_4k',
                'Length1000Depth73_3needle_en_4k',
                'Length1000Depth78_3needle_en_4k',
                'Length1000Depth84_3needle_en_4k',
                'Length1000Depth89_3needle_en_4k',
                'Length1000Depth94_3needle_en_4k',
                'Length1000Depth100_3needle_en_4k',
                'Length2000Depth0_3needle_en_4k',
                'Length2000Depth5_3needle_en_4k',
                'Length2000Depth10_3needle_en_4k',
                'Length2000Depth15_3needle_en_4k',
                'Length2000Depth21_3needle_en_4k',
                'Length2000Depth26_3needle_en_4k',
                'Length2000Depth31_3needle_en_4k',
                'Length2000Depth36_3needle_en_4k',
                'Length2000Depth42_3needle_en_4k',
                'Length2000Depth47_3needle_en_4k',
                'Length2000Depth52_3needle_en_4k',
                'Length2000Depth57_3needle_en_4k',
                'Length2000Depth63_3needle_en_4k',
                'Length2000Depth68_3needle_en_4k',
                'Length2000Depth73_3needle_en_4k',
                'Length2000Depth78_3needle_en_4k',
                'Length2000Depth84_3needle_en_4k',
                'Length2000Depth89_3needle_en_4k',
                'Length2000Depth94_3needle_en_4k',
                'Length2000Depth100_3needle_en_4k',
                'Length3000Depth0_3needle_en_4k',
                'Length3000Depth5_3needle_en_4k',
                'Length3000Depth10_3needle_en_4k',
                'Length3000Depth15_3needle_en_4k',
                'Length3000Depth21_3needle_en_4k',
                'Length3000Depth26_3needle_en_4k',
                'Length3000Depth31_3needle_en_4k',
                'Length3000Depth36_3needle_en_4k',
                'Length3000Depth42_3needle_en_4k',
                'Length3000Depth47_3needle_en_4k',
                'Length3000Depth52_3needle_en_4k',
                'Length3000Depth57_3needle_en_4k',
                'Length3000Depth63_3needle_en_4k',
                'Length3000Depth68_3needle_en_4k',
                'Length3000Depth73_3needle_en_4k',
                'Length3000Depth78_3needle_en_4k',
                'Length3000Depth84_3needle_en_4k',
                'Length3000Depth89_3needle_en_4k',
                'Length3000Depth94_3needle_en_4k',
                'Length3000Depth100_3needle_en_4k',
                'Length4000Depth0_3needle_en_4k',
                'Length4000Depth5_3needle_en_4k',
                'Length4000Depth10_3needle_en_4k',
                'Length4000Depth15_3needle_en_4k',
                'Length4000Depth21_3needle_en_4k',
                'Length4000Depth26_3needle_en_4k',
                'Length4000Depth31_3needle_en_4k',
                'Length4000Depth36_3needle_en_4k',
                'Length4000Depth42_3needle_en_4k',
                'Length4000Depth47_3needle_en_4k',
                'Length4000Depth52_3needle_en_4k',
                'Length4000Depth57_3needle_en_4k',
                'Length4000Depth63_3needle_en_4k',
                'Length4000Depth68_3needle_en_4k',
                'Length4000Depth73_3needle_en_4k',
                'Length4000Depth78_3needle_en_4k',
                'Length4000Depth84_3needle_en_4k',
                'Length4000Depth89_3needle_en_4k',
                'Length4000Depth94_3needle_en_4k',
                'Length4000Depth100_3needle_en_4k',
                'Length1000Depth0_3needle_zh_4k',
                'Length1000Depth5_3needle_zh_4k',
                'Length1000Depth10_3needle_zh_4k',
                'Length1000Depth15_3needle_zh_4k',
                'Length1000Depth21_3needle_zh_4k',
                'Length1000Depth26_3needle_zh_4k',
                'Length1000Depth31_3needle_zh_4k',
                'Length1000Depth36_3needle_zh_4k',
                'Length1000Depth42_3needle_zh_4k',
                'Length1000Depth47_3needle_zh_4k',
                'Length1000Depth52_3needle_zh_4k',
                'Length1000Depth57_3needle_zh_4k',
                'Length1000Depth63_3needle_zh_4k',
                'Length1000Depth68_3needle_zh_4k',
                'Length1000Depth73_3needle_zh_4k',
                'Length1000Depth78_3needle_zh_4k',
                'Length1000Depth84_3needle_zh_4k',
                'Length1000Depth89_3needle_zh_4k',
                'Length1000Depth94_3needle_zh_4k',
                'Length1000Depth100_3needle_zh_4k',
                'Length2000Depth0_3needle_zh_4k',
                'Length2000Depth5_3needle_zh_4k',
                'Length2000Depth10_3needle_zh_4k',
                'Length2000Depth15_3needle_zh_4k',
                'Length2000Depth21_3needle_zh_4k',
                'Length2000Depth26_3needle_zh_4k',
                'Length2000Depth31_3needle_zh_4k',
                'Length2000Depth36_3needle_zh_4k',
                'Length2000Depth42_3needle_zh_4k',
                'Length2000Depth47_3needle_zh_4k',
                'Length2000Depth52_3needle_zh_4k',
                'Length2000Depth57_3needle_zh_4k',
                'Length2000Depth63_3needle_zh_4k',
                'Length2000Depth68_3needle_zh_4k',
                'Length2000Depth73_3needle_zh_4k',
                'Length2000Depth78_3needle_zh_4k',
                'Length2000Depth84_3needle_zh_4k',
                'Length2000Depth89_3needle_zh_4k',
                'Length2000Depth94_3needle_zh_4k',
                'Length2000Depth100_3needle_zh_4k',
                'Length3000Depth0_3needle_zh_4k',
                'Length3000Depth5_3needle_zh_4k',
                'Length3000Depth10_3needle_zh_4k',
                'Length3000Depth15_3needle_zh_4k',
                'Length3000Depth21_3needle_zh_4k',
                'Length3000Depth26_3needle_zh_4k',
                'Length3000Depth31_3needle_zh_4k',
                'Length3000Depth36_3needle_zh_4k',
                'Length3000Depth42_3needle_zh_4k',
                'Length3000Depth47_3needle_zh_4k',
                'Length3000Depth52_3needle_zh_4k',
                'Length3000Depth57_3needle_zh_4k',
                'Length3000Depth63_3needle_zh_4k',
                'Length3000Depth68_3needle_zh_4k',
                'Length3000Depth73_3needle_zh_4k',
                'Length3000Depth78_3needle_zh_4k',
                'Length3000Depth84_3needle_zh_4k',
                'Length3000Depth89_3needle_zh_4k',
                'Length3000Depth94_3needle_zh_4k',
                'Length3000Depth100_3needle_zh_4k',
                'Length4000Depth0_3needle_zh_4k',
                'Length4000Depth5_3needle_zh_4k',
                'Length4000Depth10_3needle_zh_4k',
                'Length4000Depth15_3needle_zh_4k',
                'Length4000Depth21_3needle_zh_4k',
                'Length4000Depth26_3needle_zh_4k',
                'Length4000Depth31_3needle_zh_4k',
                'Length4000Depth36_3needle_zh_4k',
                'Length4000Depth42_3needle_zh_4k',
                'Length4000Depth47_3needle_zh_4k',
                'Length4000Depth52_3needle_zh_4k',
                'Length4000Depth57_3needle_zh_4k',
                'Length4000Depth63_3needle_zh_4k',
                'Length4000Depth68_3needle_zh_4k',
                'Length4000Depth73_3needle_zh_4k',
                'Length4000Depth78_3needle_zh_4k',
                'Length4000Depth84_3needle_zh_4k',
                'Length4000Depth89_3needle_zh_4k',
                'Length4000Depth94_3needle_zh_4k',
                'Length4000Depth100_3needle_zh_4k',
                'Length1000Depth0_4needle_en_4k',
                'Length1000Depth5_4needle_en_4k',
                'Length1000Depth10_4needle_en_4k',
                'Length1000Depth15_4needle_en_4k',
                'Length1000Depth21_4needle_en_4k',
                'Length1000Depth26_4needle_en_4k',
                'Length1000Depth31_4needle_en_4k',
                'Length1000Depth36_4needle_en_4k',
                'Length1000Depth42_4needle_en_4k',
                'Length1000Depth47_4needle_en_4k',
                'Length1000Depth52_4needle_en_4k',
                'Length1000Depth57_4needle_en_4k',
                'Length1000Depth63_4needle_en_4k',
                'Length1000Depth68_4needle_en_4k',
                'Length1000Depth73_4needle_en_4k',
                'Length1000Depth78_4needle_en_4k',
                'Length1000Depth84_4needle_en_4k',
                'Length1000Depth89_4needle_en_4k',
                'Length1000Depth94_4needle_en_4k',
                'Length1000Depth100_4needle_en_4k',
                'Length2000Depth0_4needle_en_4k',
                'Length2000Depth5_4needle_en_4k',
                'Length2000Depth10_4needle_en_4k',
                'Length2000Depth15_4needle_en_4k',
                'Length2000Depth21_4needle_en_4k',
                'Length2000Depth26_4needle_en_4k',
                'Length2000Depth31_4needle_en_4k',
                'Length2000Depth36_4needle_en_4k',
                'Length2000Depth42_4needle_en_4k',
                'Length2000Depth47_4needle_en_4k',
                'Length2000Depth52_4needle_en_4k',
                'Length2000Depth57_4needle_en_4k',
                'Length2000Depth63_4needle_en_4k',
                'Length2000Depth68_4needle_en_4k',
                'Length2000Depth73_4needle_en_4k',
                'Length2000Depth78_4needle_en_4k',
                'Length2000Depth84_4needle_en_4k',
                'Length2000Depth89_4needle_en_4k',
                'Length2000Depth94_4needle_en_4k',
                'Length2000Depth100_4needle_en_4k',
                'Length3000Depth0_4needle_en_4k',
                'Length3000Depth5_4needle_en_4k',
                'Length3000Depth10_4needle_en_4k',
                'Length3000Depth15_4needle_en_4k',
                'Length3000Depth21_4needle_en_4k',
                'Length3000Depth26_4needle_en_4k',
                'Length3000Depth31_4needle_en_4k',
                'Length3000Depth36_4needle_en_4k',
                'Length3000Depth42_4needle_en_4k',
                'Length3000Depth47_4needle_en_4k',
                'Length3000Depth52_4needle_en_4k',
                'Length3000Depth57_4needle_en_4k',
                'Length3000Depth63_4needle_en_4k',
                'Length3000Depth68_4needle_en_4k',
                'Length3000Depth73_4needle_en_4k',
                'Length3000Depth78_4needle_en_4k',
                'Length3000Depth84_4needle_en_4k',
                'Length3000Depth89_4needle_en_4k',
                'Length3000Depth94_4needle_en_4k',
                'Length3000Depth100_4needle_en_4k',
                'Length4000Depth0_4needle_en_4k',
                'Length4000Depth5_4needle_en_4k',
                'Length4000Depth10_4needle_en_4k',
                'Length4000Depth15_4needle_en_4k',
                'Length4000Depth21_4needle_en_4k',
                'Length4000Depth26_4needle_en_4k',
                'Length4000Depth31_4needle_en_4k',
                'Length4000Depth36_4needle_en_4k',
                'Length4000Depth42_4needle_en_4k',
                'Length4000Depth47_4needle_en_4k',
                'Length4000Depth52_4needle_en_4k',
                'Length4000Depth57_4needle_en_4k',
                'Length4000Depth63_4needle_en_4k',
                'Length4000Depth68_4needle_en_4k',
                'Length4000Depth73_4needle_en_4k',
                'Length4000Depth78_4needle_en_4k',
                'Length4000Depth84_4needle_en_4k',
                'Length4000Depth89_4needle_en_4k',
                'Length4000Depth94_4needle_en_4k',
                'Length4000Depth100_4needle_en_4k',
                'Length1000Depth0_4needle_zh_4k',
                'Length1000Depth5_4needle_zh_4k',
                'Length1000Depth10_4needle_zh_4k',
                'Length1000Depth15_4needle_zh_4k',
                'Length1000Depth21_4needle_zh_4k',
                'Length1000Depth26_4needle_zh_4k',
                'Length1000Depth31_4needle_zh_4k',
                'Length1000Depth36_4needle_zh_4k',
                'Length1000Depth42_4needle_zh_4k',
                'Length1000Depth47_4needle_zh_4k',
                'Length1000Depth52_4needle_zh_4k',
                'Length1000Depth57_4needle_zh_4k',
                'Length1000Depth63_4needle_zh_4k',
                'Length1000Depth68_4needle_zh_4k',
                'Length1000Depth73_4needle_zh_4k',
                'Length1000Depth78_4needle_zh_4k',
                'Length1000Depth84_4needle_zh_4k',
                'Length1000Depth89_4needle_zh_4k',
                'Length1000Depth94_4needle_zh_4k',
                'Length1000Depth100_4needle_zh_4k',
                'Length2000Depth0_4needle_zh_4k',
                'Length2000Depth5_4needle_zh_4k',
                'Length2000Depth10_4needle_zh_4k',
                'Length2000Depth15_4needle_zh_4k',
                'Length2000Depth21_4needle_zh_4k',
                'Length2000Depth26_4needle_zh_4k',
                'Length2000Depth31_4needle_zh_4k',
                'Length2000Depth36_4needle_zh_4k',
                'Length2000Depth42_4needle_zh_4k',
                'Length2000Depth47_4needle_zh_4k',
                'Length2000Depth52_4needle_zh_4k',
                'Length2000Depth57_4needle_zh_4k',
                'Length2000Depth63_4needle_zh_4k',
                'Length2000Depth68_4needle_zh_4k',
                'Length2000Depth73_4needle_zh_4k',
                'Length2000Depth78_4needle_zh_4k',
                'Length2000Depth84_4needle_zh_4k',
                'Length2000Depth89_4needle_zh_4k',
                'Length2000Depth94_4needle_zh_4k',
                'Length2000Depth100_4needle_zh_4k',
                'Length3000Depth0_4needle_zh_4k',
                'Length3000Depth5_4needle_zh_4k',
                'Length3000Depth10_4needle_zh_4k',
                'Length3000Depth15_4needle_zh_4k',
                'Length3000Depth21_4needle_zh_4k',
                'Length3000Depth26_4needle_zh_4k',
                'Length3000Depth31_4needle_zh_4k',
                'Length3000Depth36_4needle_zh_4k',
                'Length3000Depth42_4needle_zh_4k',
                'Length3000Depth47_4needle_zh_4k',
                'Length3000Depth52_4needle_zh_4k',
                'Length3000Depth57_4needle_zh_4k',
                'Length3000Depth63_4needle_zh_4k',
                'Length3000Depth68_4needle_zh_4k',
                'Length3000Depth73_4needle_zh_4k',
                'Length3000Depth78_4needle_zh_4k',
                'Length3000Depth84_4needle_zh_4k',
                'Length3000Depth89_4needle_zh_4k',
                'Length3000Depth94_4needle_zh_4k',
                'Length3000Depth100_4needle_zh_4k',
                'Length4000Depth0_4needle_zh_4k',
                'Length4000Depth5_4needle_zh_4k',
                'Length4000Depth10_4needle_zh_4k',
                'Length4000Depth15_4needle_zh_4k',
                'Length4000Depth21_4needle_zh_4k',
                'Length4000Depth26_4needle_zh_4k',
                'Length4000Depth31_4needle_zh_4k',
                'Length4000Depth36_4needle_zh_4k',
                'Length4000Depth42_4needle_zh_4k',
                'Length4000Depth47_4needle_zh_4k',
                'Length4000Depth52_4needle_zh_4k',
                'Length4000Depth57_4needle_zh_4k',
                'Length4000Depth63_4needle_zh_4k',
                'Length4000Depth68_4needle_zh_4k',
                'Length4000Depth73_4needle_zh_4k',
                'Length4000Depth78_4needle_zh_4k',
                'Length4000Depth84_4needle_zh_4k',
                'Length4000Depth89_4needle_zh_4k',
                'Length4000Depth94_4needle_zh_4k',
                'Length4000Depth100_4needle_zh_4k',
                'Length1000Depth0_5needle_en_4k',
                'Length1000Depth5_5needle_en_4k',
                'Length1000Depth10_5needle_en_4k',
                'Length1000Depth15_5needle_en_4k',
                'Length1000Depth21_5needle_en_4k',
                'Length1000Depth26_5needle_en_4k',
                'Length1000Depth31_5needle_en_4k',
                'Length1000Depth36_5needle_en_4k',
                'Length1000Depth42_5needle_en_4k',
                'Length1000Depth47_5needle_en_4k',
                'Length1000Depth52_5needle_en_4k',
                'Length1000Depth57_5needle_en_4k',
                'Length1000Depth63_5needle_en_4k',
                'Length1000Depth68_5needle_en_4k',
                'Length1000Depth73_5needle_en_4k',
                'Length1000Depth78_5needle_en_4k',
                'Length1000Depth84_5needle_en_4k',
                'Length1000Depth89_5needle_en_4k',
                'Length1000Depth94_5needle_en_4k',
                'Length1000Depth100_5needle_en_4k',
                'Length2000Depth0_5needle_en_4k',
                'Length2000Depth5_5needle_en_4k',
                'Length2000Depth10_5needle_en_4k',
                'Length2000Depth15_5needle_en_4k',
                'Length2000Depth21_5needle_en_4k',
                'Length2000Depth26_5needle_en_4k',
                'Length2000Depth31_5needle_en_4k',
                'Length2000Depth36_5needle_en_4k',
                'Length2000Depth42_5needle_en_4k',
                'Length2000Depth47_5needle_en_4k',
                'Length2000Depth52_5needle_en_4k',
                'Length2000Depth57_5needle_en_4k',
                'Length2000Depth63_5needle_en_4k',
                'Length2000Depth68_5needle_en_4k',
                'Length2000Depth73_5needle_en_4k',
                'Length2000Depth78_5needle_en_4k',
                'Length2000Depth84_5needle_en_4k',
                'Length2000Depth89_5needle_en_4k',
                'Length2000Depth94_5needle_en_4k',
                'Length2000Depth100_5needle_en_4k',
                'Length3000Depth0_5needle_en_4k',
                'Length3000Depth5_5needle_en_4k',
                'Length3000Depth10_5needle_en_4k',
                'Length3000Depth15_5needle_en_4k',
                'Length3000Depth21_5needle_en_4k',
                'Length3000Depth26_5needle_en_4k',
                'Length3000Depth31_5needle_en_4k',
                'Length3000Depth36_5needle_en_4k',
                'Length3000Depth42_5needle_en_4k',
                'Length3000Depth47_5needle_en_4k',
                'Length3000Depth52_5needle_en_4k',
                'Length3000Depth57_5needle_en_4k',
                'Length3000Depth63_5needle_en_4k',
                'Length3000Depth68_5needle_en_4k',
                'Length3000Depth73_5needle_en_4k',
                'Length3000Depth78_5needle_en_4k',
                'Length3000Depth84_5needle_en_4k',
                'Length3000Depth89_5needle_en_4k',
                'Length3000Depth94_5needle_en_4k',
                'Length3000Depth100_5needle_en_4k',
                'Length4000Depth0_5needle_en_4k',
                'Length4000Depth5_5needle_en_4k',
                'Length4000Depth10_5needle_en_4k',
                'Length4000Depth15_5needle_en_4k',
                'Length4000Depth21_5needle_en_4k',
                'Length4000Depth26_5needle_en_4k',
                'Length4000Depth31_5needle_en_4k',
                'Length4000Depth36_5needle_en_4k',
                'Length4000Depth42_5needle_en_4k',
                'Length4000Depth47_5needle_en_4k',
                'Length4000Depth52_5needle_en_4k',
                'Length4000Depth57_5needle_en_4k',
                'Length4000Depth63_5needle_en_4k',
                'Length4000Depth68_5needle_en_4k',
                'Length4000Depth73_5needle_en_4k',
                'Length4000Depth78_5needle_en_4k',
                'Length4000Depth84_5needle_en_4k',
                'Length4000Depth89_5needle_en_4k',
                'Length4000Depth94_5needle_en_4k',
                'Length4000Depth100_5needle_en_4k',
                'Length1000Depth0_5needle_zh_4k',
                'Length1000Depth5_5needle_zh_4k',
                'Length1000Depth10_5needle_zh_4k',
                'Length1000Depth15_5needle_zh_4k',
                'Length1000Depth21_5needle_zh_4k',
                'Length1000Depth26_5needle_zh_4k',
                'Length1000Depth31_5needle_zh_4k',
                'Length1000Depth36_5needle_zh_4k',
                'Length1000Depth42_5needle_zh_4k',
                'Length1000Depth47_5needle_zh_4k',
                'Length1000Depth52_5needle_zh_4k',
                'Length1000Depth57_5needle_zh_4k',
                'Length1000Depth63_5needle_zh_4k',
                'Length1000Depth68_5needle_zh_4k',
                'Length1000Depth73_5needle_zh_4k',
                'Length1000Depth78_5needle_zh_4k',
                'Length1000Depth84_5needle_zh_4k',
                'Length1000Depth89_5needle_zh_4k',
                'Length1000Depth94_5needle_zh_4k',
                'Length1000Depth100_5needle_zh_4k',
                'Length2000Depth0_5needle_zh_4k',
                'Length2000Depth5_5needle_zh_4k',
                'Length2000Depth10_5needle_zh_4k',
                'Length2000Depth15_5needle_zh_4k',
                'Length2000Depth21_5needle_zh_4k',
                'Length2000Depth26_5needle_zh_4k',
                'Length2000Depth31_5needle_zh_4k',
                'Length2000Depth36_5needle_zh_4k',
                'Length2000Depth42_5needle_zh_4k',
                'Length2000Depth47_5needle_zh_4k',
                'Length2000Depth52_5needle_zh_4k',
                'Length2000Depth57_5needle_zh_4k',
                'Length2000Depth63_5needle_zh_4k',
                'Length2000Depth68_5needle_zh_4k',
                'Length2000Depth73_5needle_zh_4k',
                'Length2000Depth78_5needle_zh_4k',
                'Length2000Depth84_5needle_zh_4k',
                'Length2000Depth89_5needle_zh_4k',
                'Length2000Depth94_5needle_zh_4k',
                'Length2000Depth100_5needle_zh_4k',
                'Length3000Depth0_5needle_zh_4k',
                'Length3000Depth5_5needle_zh_4k',
                'Length3000Depth10_5needle_zh_4k',
                'Length3000Depth15_5needle_zh_4k',
                'Length3000Depth21_5needle_zh_4k',
                'Length3000Depth26_5needle_zh_4k',
                'Length3000Depth31_5needle_zh_4k',
                'Length3000Depth36_5needle_zh_4k',
                'Length3000Depth42_5needle_zh_4k',
                'Length3000Depth47_5needle_zh_4k',
                'Length3000Depth52_5needle_zh_4k',
                'Length3000Depth57_5needle_zh_4k',
                'Length3000Depth63_5needle_zh_4k',
                'Length3000Depth68_5needle_zh_4k',
                'Length3000Depth73_5needle_zh_4k',
                'Length3000Depth78_5needle_zh_4k',
                'Length3000Depth84_5needle_zh_4k',
                'Length3000Depth89_5needle_zh_4k',
                'Length3000Depth94_5needle_zh_4k',
                'Length3000Depth100_5needle_zh_4k',
                'Length4000Depth0_5needle_zh_4k',
                'Length4000Depth5_5needle_zh_4k',
                'Length4000Depth10_5needle_zh_4k',
                'Length4000Depth15_5needle_zh_4k',
                'Length4000Depth21_5needle_zh_4k',
                'Length4000Depth26_5needle_zh_4k',
                'Length4000Depth31_5needle_zh_4k',
                'Length4000Depth36_5needle_zh_4k',
                'Length4000Depth42_5needle_zh_4k',
                'Length4000Depth47_5needle_zh_4k',
                'Length4000Depth52_5needle_zh_4k',
                'Length4000Depth57_5needle_zh_4k',
                'Length4000Depth63_5needle_zh_4k',
                'Length4000Depth68_5needle_zh_4k',
                'Length4000Depth73_5needle_zh_4k',
                'Length4000Depth78_5needle_zh_4k',
                'Length4000Depth84_5needle_zh_4k',
                'Length4000Depth89_5needle_zh_4k',
                'Length4000Depth94_5needle_zh_4k',
                'Length4000Depth100_5needle_zh_4k',
                ]),
        dict(name='Multi-Needle-Reasoning-EN',
            subsets=[
                'Length1000Depth0_2needle_en_4k',
                'Length1000Depth5_2needle_en_4k',
                'Length1000Depth10_2needle_en_4k',
                'Length1000Depth15_2needle_en_4k',
                'Length1000Depth21_2needle_en_4k',
                'Length1000Depth26_2needle_en_4k',
                'Length1000Depth31_2needle_en_4k',
                'Length1000Depth36_2needle_en_4k',
                'Length1000Depth42_2needle_en_4k',
                'Length1000Depth47_2needle_en_4k',
                'Length1000Depth52_2needle_en_4k',
                'Length1000Depth57_2needle_en_4k',
                'Length1000Depth63_2needle_en_4k',
                'Length1000Depth68_2needle_en_4k',
                'Length1000Depth73_2needle_en_4k',
                'Length1000Depth78_2needle_en_4k',
                'Length1000Depth84_2needle_en_4k',
                'Length1000Depth89_2needle_en_4k',
                'Length1000Depth94_2needle_en_4k',
                'Length1000Depth100_2needle_en_4k',
                'Length2000Depth0_2needle_en_4k',
                'Length2000Depth5_2needle_en_4k',
                'Length2000Depth10_2needle_en_4k',
                'Length2000Depth15_2needle_en_4k',
                'Length2000Depth21_2needle_en_4k',
                'Length2000Depth26_2needle_en_4k',
                'Length2000Depth31_2needle_en_4k',
                'Length2000Depth36_2needle_en_4k',
                'Length2000Depth42_2needle_en_4k',
                'Length2000Depth47_2needle_en_4k',
                'Length2000Depth52_2needle_en_4k',
                'Length2000Depth57_2needle_en_4k',
                'Length2000Depth63_2needle_en_4k',
                'Length2000Depth68_2needle_en_4k',
                'Length2000Depth73_2needle_en_4k',
                'Length2000Depth78_2needle_en_4k',
                'Length2000Depth84_2needle_en_4k',
                'Length2000Depth89_2needle_en_4k',
                'Length2000Depth94_2needle_en_4k',
                'Length2000Depth100_2needle_en_4k',
                'Length3000Depth0_2needle_en_4k',
                'Length3000Depth5_2needle_en_4k',
                'Length3000Depth10_2needle_en_4k',
                'Length3000Depth15_2needle_en_4k',
                'Length3000Depth21_2needle_en_4k',
                'Length3000Depth26_2needle_en_4k',
                'Length3000Depth31_2needle_en_4k',
                'Length3000Depth36_2needle_en_4k',
                'Length3000Depth42_2needle_en_4k',
                'Length3000Depth47_2needle_en_4k',
                'Length3000Depth52_2needle_en_4k',
                'Length3000Depth57_2needle_en_4k',
                'Length3000Depth63_2needle_en_4k',
                'Length3000Depth68_2needle_en_4k',
                'Length3000Depth73_2needle_en_4k',
                'Length3000Depth78_2needle_en_4k',
                'Length3000Depth84_2needle_en_4k',
                'Length3000Depth89_2needle_en_4k',
                'Length3000Depth94_2needle_en_4k',
                'Length3000Depth100_2needle_en_4k',
                'Length4000Depth0_2needle_en_4k',
                'Length4000Depth5_2needle_en_4k',
                'Length4000Depth10_2needle_en_4k',
                'Length4000Depth15_2needle_en_4k',
                'Length4000Depth21_2needle_en_4k',
                'Length4000Depth26_2needle_en_4k',
                'Length4000Depth31_2needle_en_4k',
                'Length4000Depth36_2needle_en_4k',
                'Length4000Depth42_2needle_en_4k',
                'Length4000Depth47_2needle_en_4k',
                'Length4000Depth52_2needle_en_4k',
                'Length4000Depth57_2needle_en_4k',
                'Length4000Depth63_2needle_en_4k',
                'Length4000Depth68_2needle_en_4k',
                'Length4000Depth73_2needle_en_4k',
                'Length4000Depth78_2needle_en_4k',
                'Length4000Depth84_2needle_en_4k',
                'Length4000Depth89_2needle_en_4k',
                'Length4000Depth94_2needle_en_4k',
                'Length4000Depth100_2needle_en_4k',
                'Length1000Depth0_3needle_en_4k',
                'Length1000Depth5_3needle_en_4k',
                'Length1000Depth10_3needle_en_4k',
                'Length1000Depth15_3needle_en_4k',
                'Length1000Depth21_3needle_en_4k',
                'Length1000Depth26_3needle_en_4k',
                'Length1000Depth31_3needle_en_4k',
                'Length1000Depth36_3needle_en_4k',
                'Length1000Depth42_3needle_en_4k',
                'Length1000Depth47_3needle_en_4k',
                'Length1000Depth52_3needle_en_4k',
                'Length1000Depth57_3needle_en_4k',
                'Length1000Depth63_3needle_en_4k',
                'Length1000Depth68_3needle_en_4k',
                'Length1000Depth73_3needle_en_4k',
                'Length1000Depth78_3needle_en_4k',
                'Length1000Depth84_3needle_en_4k',
                'Length1000Depth89_3needle_en_4k',
                'Length1000Depth94_3needle_en_4k',
                'Length1000Depth100_3needle_en_4k',
                'Length2000Depth0_3needle_en_4k',
                'Length2000Depth5_3needle_en_4k',
                'Length2000Depth10_3needle_en_4k',
                'Length2000Depth15_3needle_en_4k',
                'Length2000Depth21_3needle_en_4k',
                'Length2000Depth26_3needle_en_4k',
                'Length2000Depth31_3needle_en_4k',
                'Length2000Depth36_3needle_en_4k',
                'Length2000Depth42_3needle_en_4k',
                'Length2000Depth47_3needle_en_4k',
                'Length2000Depth52_3needle_en_4k',
                'Length2000Depth57_3needle_en_4k',
                'Length2000Depth63_3needle_en_4k',
                'Length2000Depth68_3needle_en_4k',
                'Length2000Depth73_3needle_en_4k',
                'Length2000Depth78_3needle_en_4k',
                'Length2000Depth84_3needle_en_4k',
                'Length2000Depth89_3needle_en_4k',
                'Length2000Depth94_3needle_en_4k',
                'Length2000Depth100_3needle_en_4k',
                'Length3000Depth0_3needle_en_4k',
                'Length3000Depth5_3needle_en_4k',
                'Length3000Depth10_3needle_en_4k',
                'Length3000Depth15_3needle_en_4k',
                'Length3000Depth21_3needle_en_4k',
                'Length3000Depth26_3needle_en_4k',
                'Length3000Depth31_3needle_en_4k',
                'Length3000Depth36_3needle_en_4k',
                'Length3000Depth42_3needle_en_4k',
                'Length3000Depth47_3needle_en_4k',
                'Length3000Depth52_3needle_en_4k',
                'Length3000Depth57_3needle_en_4k',
                'Length3000Depth63_3needle_en_4k',
                'Length3000Depth68_3needle_en_4k',
                'Length3000Depth73_3needle_en_4k',
                'Length3000Depth78_3needle_en_4k',
                'Length3000Depth84_3needle_en_4k',
                'Length3000Depth89_3needle_en_4k',
                'Length3000Depth94_3needle_en_4k',
                'Length3000Depth100_3needle_en_4k',
                'Length4000Depth0_3needle_en_4k',
                'Length4000Depth5_3needle_en_4k',
                'Length4000Depth10_3needle_en_4k',
                'Length4000Depth15_3needle_en_4k',
                'Length4000Depth21_3needle_en_4k',
                'Length4000Depth26_3needle_en_4k',
                'Length4000Depth31_3needle_en_4k',
                'Length4000Depth36_3needle_en_4k',
                'Length4000Depth42_3needle_en_4k',
                'Length4000Depth47_3needle_en_4k',
                'Length4000Depth52_3needle_en_4k',
                'Length4000Depth57_3needle_en_4k',
                'Length4000Depth63_3needle_en_4k',
                'Length4000Depth68_3needle_en_4k',
                'Length4000Depth73_3needle_en_4k',
                'Length4000Depth78_3needle_en_4k',
                'Length4000Depth84_3needle_en_4k',
                'Length4000Depth89_3needle_en_4k',
                'Length4000Depth94_3needle_en_4k',
                'Length4000Depth100_3needle_en_4k',
                'Length1000Depth0_4needle_en_4k',
                'Length1000Depth5_4needle_en_4k',
                'Length1000Depth10_4needle_en_4k',
                'Length1000Depth15_4needle_en_4k',
                'Length1000Depth21_4needle_en_4k',
                'Length1000Depth26_4needle_en_4k',
                'Length1000Depth31_4needle_en_4k',
                'Length1000Depth36_4needle_en_4k',
                'Length1000Depth42_4needle_en_4k',
                'Length1000Depth47_4needle_en_4k',
                'Length1000Depth52_4needle_en_4k',
                'Length1000Depth57_4needle_en_4k',
                'Length1000Depth63_4needle_en_4k',
                'Length1000Depth68_4needle_en_4k',
                'Length1000Depth73_4needle_en_4k',
                'Length1000Depth78_4needle_en_4k',
                'Length1000Depth84_4needle_en_4k',
                'Length1000Depth89_4needle_en_4k',
                'Length1000Depth94_4needle_en_4k',
                'Length1000Depth100_4needle_en_4k',
                'Length2000Depth0_4needle_en_4k',
                'Length2000Depth5_4needle_en_4k',
                'Length2000Depth10_4needle_en_4k',
                'Length2000Depth15_4needle_en_4k',
                'Length2000Depth21_4needle_en_4k',
                'Length2000Depth26_4needle_en_4k',
                'Length2000Depth31_4needle_en_4k',
                'Length2000Depth36_4needle_en_4k',
                'Length2000Depth42_4needle_en_4k',
                'Length2000Depth47_4needle_en_4k',
                'Length2000Depth52_4needle_en_4k',
                'Length2000Depth57_4needle_en_4k',
                'Length2000Depth63_4needle_en_4k',
                'Length2000Depth68_4needle_en_4k',
                'Length2000Depth73_4needle_en_4k',
                'Length2000Depth78_4needle_en_4k',
                'Length2000Depth84_4needle_en_4k',
                'Length2000Depth89_4needle_en_4k',
                'Length2000Depth94_4needle_en_4k',
                'Length2000Depth100_4needle_en_4k',
                'Length3000Depth0_4needle_en_4k',
                'Length3000Depth5_4needle_en_4k',
                'Length3000Depth10_4needle_en_4k',
                'Length3000Depth15_4needle_en_4k',
                'Length3000Depth21_4needle_en_4k',
                'Length3000Depth26_4needle_en_4k',
                'Length3000Depth31_4needle_en_4k',
                'Length3000Depth36_4needle_en_4k',
                'Length3000Depth42_4needle_en_4k',
                'Length3000Depth47_4needle_en_4k',
                'Length3000Depth52_4needle_en_4k',
                'Length3000Depth57_4needle_en_4k',
                'Length3000Depth63_4needle_en_4k',
                'Length3000Depth68_4needle_en_4k',
                'Length3000Depth73_4needle_en_4k',
                'Length3000Depth78_4needle_en_4k',
                'Length3000Depth84_4needle_en_4k',
                'Length3000Depth89_4needle_en_4k',
                'Length3000Depth94_4needle_en_4k',
                'Length3000Depth100_4needle_en_4k',
                'Length4000Depth0_4needle_en_4k',
                'Length4000Depth5_4needle_en_4k',
                'Length4000Depth10_4needle_en_4k',
                'Length4000Depth15_4needle_en_4k',
                'Length4000Depth21_4needle_en_4k',
                'Length4000Depth26_4needle_en_4k',
                'Length4000Depth31_4needle_en_4k',
                'Length4000Depth36_4needle_en_4k',
                'Length4000Depth42_4needle_en_4k',
                'Length4000Depth47_4needle_en_4k',
                'Length4000Depth52_4needle_en_4k',
                'Length4000Depth57_4needle_en_4k',
                'Length4000Depth63_4needle_en_4k',
                'Length4000Depth68_4needle_en_4k',
                'Length4000Depth73_4needle_en_4k',
                'Length4000Depth78_4needle_en_4k',
                'Length4000Depth84_4needle_en_4k',
                'Length4000Depth89_4needle_en_4k',
                'Length4000Depth94_4needle_en_4k',
                'Length4000Depth100_4needle_en_4k',
                'Length1000Depth0_5needle_en_4k',
                'Length1000Depth5_5needle_en_4k',
                'Length1000Depth10_5needle_en_4k',
                'Length1000Depth15_5needle_en_4k',
                'Length1000Depth21_5needle_en_4k',
                'Length1000Depth26_5needle_en_4k',
                'Length1000Depth31_5needle_en_4k',
                'Length1000Depth36_5needle_en_4k',
                'Length1000Depth42_5needle_en_4k',
                'Length1000Depth47_5needle_en_4k',
                'Length1000Depth52_5needle_en_4k',
                'Length1000Depth57_5needle_en_4k',
                'Length1000Depth63_5needle_en_4k',
                'Length1000Depth68_5needle_en_4k',
                'Length1000Depth73_5needle_en_4k',
                'Length1000Depth78_5needle_en_4k',
                'Length1000Depth84_5needle_en_4k',
                'Length1000Depth89_5needle_en_4k',
                'Length1000Depth94_5needle_en_4k',
                'Length1000Depth100_5needle_en_4k',
                'Length2000Depth0_5needle_en_4k',
                'Length2000Depth5_5needle_en_4k',
                'Length2000Depth10_5needle_en_4k',
                'Length2000Depth15_5needle_en_4k',
                'Length2000Depth21_5needle_en_4k',
                'Length2000Depth26_5needle_en_4k',
                'Length2000Depth31_5needle_en_4k',
                'Length2000Depth36_5needle_en_4k',
                'Length2000Depth42_5needle_en_4k',
                'Length2000Depth47_5needle_en_4k',
                'Length2000Depth52_5needle_en_4k',
                'Length2000Depth57_5needle_en_4k',
                'Length2000Depth63_5needle_en_4k',
                'Length2000Depth68_5needle_en_4k',
                'Length2000Depth73_5needle_en_4k',
                'Length2000Depth78_5needle_en_4k',
                'Length2000Depth84_5needle_en_4k',
                'Length2000Depth89_5needle_en_4k',
                'Length2000Depth94_5needle_en_4k',
                'Length2000Depth100_5needle_en_4k',
                'Length3000Depth0_5needle_en_4k',
                'Length3000Depth5_5needle_en_4k',
                'Length3000Depth10_5needle_en_4k',
                'Length3000Depth15_5needle_en_4k',
                'Length3000Depth21_5needle_en_4k',
                'Length3000Depth26_5needle_en_4k',
                'Length3000Depth31_5needle_en_4k',
                'Length3000Depth36_5needle_en_4k',
                'Length3000Depth42_5needle_en_4k',
                'Length3000Depth47_5needle_en_4k',
                'Length3000Depth52_5needle_en_4k',
                'Length3000Depth57_5needle_en_4k',
                'Length3000Depth63_5needle_en_4k',
                'Length3000Depth68_5needle_en_4k',
                'Length3000Depth73_5needle_en_4k',
                'Length3000Depth78_5needle_en_4k',
                'Length3000Depth84_5needle_en_4k',
                'Length3000Depth89_5needle_en_4k',
                'Length3000Depth94_5needle_en_4k',
                'Length3000Depth100_5needle_en_4k',
                'Length4000Depth0_5needle_en_4k',
                'Length4000Depth5_5needle_en_4k',
                'Length4000Depth10_5needle_en_4k',
                'Length4000Depth15_5needle_en_4k',
                'Length4000Depth21_5needle_en_4k',
                'Length4000Depth26_5needle_en_4k',
                'Length4000Depth31_5needle_en_4k',
                'Length4000Depth36_5needle_en_4k',
                'Length4000Depth42_5needle_en_4k',
                'Length4000Depth47_5needle_en_4k',
                'Length4000Depth52_5needle_en_4k',
                'Length4000Depth57_5needle_en_4k',
                'Length4000Depth63_5needle_en_4k',
                'Length4000Depth68_5needle_en_4k',
                'Length4000Depth73_5needle_en_4k',
                'Length4000Depth78_5needle_en_4k',
                'Length4000Depth84_5needle_en_4k',
                'Length4000Depth89_5needle_en_4k',
                'Length4000Depth94_5needle_en_4k',
                'Length4000Depth100_5needle_en_4k',
                ]),
        dict(name='Multi-Needle-Reasoning-ZH',
            subsets=[
                'Length1000Depth0_2needle_zh_4k',
                'Length1000Depth5_2needle_zh_4k',
                'Length1000Depth10_2needle_zh_4k',
                'Length1000Depth15_2needle_zh_4k',
                'Length1000Depth21_2needle_zh_4k',
                'Length1000Depth26_2needle_zh_4k',
                'Length1000Depth31_2needle_zh_4k',
                'Length1000Depth36_2needle_zh_4k',
                'Length1000Depth42_2needle_zh_4k',
                'Length1000Depth47_2needle_zh_4k',
                'Length1000Depth52_2needle_zh_4k',
                'Length1000Depth57_2needle_zh_4k',
                'Length1000Depth63_2needle_zh_4k',
                'Length1000Depth68_2needle_zh_4k',
                'Length1000Depth73_2needle_zh_4k',
                'Length1000Depth78_2needle_zh_4k',
                'Length1000Depth84_2needle_zh_4k',
                'Length1000Depth89_2needle_zh_4k',
                'Length1000Depth94_2needle_zh_4k',
                'Length1000Depth100_2needle_zh_4k',
                'Length2000Depth0_2needle_zh_4k',
                'Length2000Depth5_2needle_zh_4k',
                'Length2000Depth10_2needle_zh_4k',
                'Length2000Depth15_2needle_zh_4k',
                'Length2000Depth21_2needle_zh_4k',
                'Length2000Depth26_2needle_zh_4k',
                'Length2000Depth31_2needle_zh_4k',
                'Length2000Depth36_2needle_zh_4k',
                'Length2000Depth42_2needle_zh_4k',
                'Length2000Depth47_2needle_zh_4k',
                'Length2000Depth52_2needle_zh_4k',
                'Length2000Depth57_2needle_zh_4k',
                'Length2000Depth63_2needle_zh_4k',
                'Length2000Depth68_2needle_zh_4k',
                'Length2000Depth73_2needle_zh_4k',
                'Length2000Depth78_2needle_zh_4k',
                'Length2000Depth84_2needle_zh_4k',
                'Length2000Depth89_2needle_zh_4k',
                'Length2000Depth94_2needle_zh_4k',
                'Length2000Depth100_2needle_zh_4k',
                'Length3000Depth0_2needle_zh_4k',
                'Length3000Depth5_2needle_zh_4k',
                'Length3000Depth10_2needle_zh_4k',
                'Length3000Depth15_2needle_zh_4k',
                'Length3000Depth21_2needle_zh_4k',
                'Length3000Depth26_2needle_zh_4k',
                'Length3000Depth31_2needle_zh_4k',
                'Length3000Depth36_2needle_zh_4k',
                'Length3000Depth42_2needle_zh_4k',
                'Length3000Depth47_2needle_zh_4k',
                'Length3000Depth52_2needle_zh_4k',
                'Length3000Depth57_2needle_zh_4k',
                'Length3000Depth63_2needle_zh_4k',
                'Length3000Depth68_2needle_zh_4k',
                'Length3000Depth73_2needle_zh_4k',
                'Length3000Depth78_2needle_zh_4k',
                'Length3000Depth84_2needle_zh_4k',
                'Length3000Depth89_2needle_zh_4k',
                'Length3000Depth94_2needle_zh_4k',
                'Length3000Depth100_2needle_zh_4k',
                'Length4000Depth0_2needle_zh_4k',
                'Length4000Depth5_2needle_zh_4k',
                'Length4000Depth10_2needle_zh_4k',
                'Length4000Depth15_2needle_zh_4k',
                'Length4000Depth21_2needle_zh_4k',
                'Length4000Depth26_2needle_zh_4k',
                'Length4000Depth31_2needle_zh_4k',
                'Length4000Depth36_2needle_zh_4k',
                'Length4000Depth42_2needle_zh_4k',
                'Length4000Depth47_2needle_zh_4k',
                'Length4000Depth52_2needle_zh_4k',
                'Length4000Depth57_2needle_zh_4k',
                'Length4000Depth63_2needle_zh_4k',
                'Length4000Depth68_2needle_zh_4k',
                'Length4000Depth73_2needle_zh_4k',
                'Length4000Depth78_2needle_zh_4k',
                'Length4000Depth84_2needle_zh_4k',
                'Length4000Depth89_2needle_zh_4k',
                'Length4000Depth94_2needle_zh_4k',
                'Length4000Depth100_2needle_zh_4k',
                'Length1000Depth0_3needle_zh_4k',
                'Length1000Depth5_3needle_zh_4k',
                'Length1000Depth10_3needle_zh_4k',
                'Length1000Depth15_3needle_zh_4k',
                'Length1000Depth21_3needle_zh_4k',
                'Length1000Depth26_3needle_zh_4k',
                'Length1000Depth31_3needle_zh_4k',
                'Length1000Depth36_3needle_zh_4k',
                'Length1000Depth42_3needle_zh_4k',
                'Length1000Depth47_3needle_zh_4k',
                'Length1000Depth52_3needle_zh_4k',
                'Length1000Depth57_3needle_zh_4k',
                'Length1000Depth63_3needle_zh_4k',
                'Length1000Depth68_3needle_zh_4k',
                'Length1000Depth73_3needle_zh_4k',
                'Length1000Depth78_3needle_zh_4k',
                'Length1000Depth84_3needle_zh_4k',
                'Length1000Depth89_3needle_zh_4k',
                'Length1000Depth94_3needle_zh_4k',
                'Length1000Depth100_3needle_zh_4k',
                'Length2000Depth0_3needle_zh_4k',
                'Length2000Depth5_3needle_zh_4k',
                'Length2000Depth10_3needle_zh_4k',
                'Length2000Depth15_3needle_zh_4k',
                'Length2000Depth21_3needle_zh_4k',
                'Length2000Depth26_3needle_zh_4k',
                'Length2000Depth31_3needle_zh_4k',
                'Length2000Depth36_3needle_zh_4k',
                'Length2000Depth42_3needle_zh_4k',
                'Length2000Depth47_3needle_zh_4k',
                'Length2000Depth52_3needle_zh_4k',
                'Length2000Depth57_3needle_zh_4k',
                'Length2000Depth63_3needle_zh_4k',
                'Length2000Depth68_3needle_zh_4k',
                'Length2000Depth73_3needle_zh_4k',
                'Length2000Depth78_3needle_zh_4k',
                'Length2000Depth84_3needle_zh_4k',
                'Length2000Depth89_3needle_zh_4k',
                'Length2000Depth94_3needle_zh_4k',
                'Length2000Depth100_3needle_zh_4k',
                'Length3000Depth0_3needle_zh_4k',
                'Length3000Depth5_3needle_zh_4k',
                'Length3000Depth10_3needle_zh_4k',
                'Length3000Depth15_3needle_zh_4k',
                'Length3000Depth21_3needle_zh_4k',
                'Length3000Depth26_3needle_zh_4k',
                'Length3000Depth31_3needle_zh_4k',
                'Length3000Depth36_3needle_zh_4k',
                'Length3000Depth42_3needle_zh_4k',
                'Length3000Depth47_3needle_zh_4k',
                'Length3000Depth52_3needle_zh_4k',
                'Length3000Depth57_3needle_zh_4k',
                'Length3000Depth63_3needle_zh_4k',
                'Length3000Depth68_3needle_zh_4k',
                'Length3000Depth73_3needle_zh_4k',
                'Length3000Depth78_3needle_zh_4k',
                'Length3000Depth84_3needle_zh_4k',
                'Length3000Depth89_3needle_zh_4k',
                'Length3000Depth94_3needle_zh_4k',
                'Length3000Depth100_3needle_zh_4k',
                'Length4000Depth0_3needle_zh_4k',
                'Length4000Depth5_3needle_zh_4k',
                'Length4000Depth10_3needle_zh_4k',
                'Length4000Depth15_3needle_zh_4k',
                'Length4000Depth21_3needle_zh_4k',
                'Length4000Depth26_3needle_zh_4k',
                'Length4000Depth31_3needle_zh_4k',
                'Length4000Depth36_3needle_zh_4k',
                'Length4000Depth42_3needle_zh_4k',
                'Length4000Depth47_3needle_zh_4k',
                'Length4000Depth52_3needle_zh_4k',
                'Length4000Depth57_3needle_zh_4k',
                'Length4000Depth63_3needle_zh_4k',
                'Length4000Depth68_3needle_zh_4k',
                'Length4000Depth73_3needle_zh_4k',
                'Length4000Depth78_3needle_zh_4k',
                'Length4000Depth84_3needle_zh_4k',
                'Length4000Depth89_3needle_zh_4k',
                'Length4000Depth94_3needle_zh_4k',
                'Length4000Depth100_3needle_zh_4k',
                'Length1000Depth0_4needle_zh_4k',
                'Length1000Depth5_4needle_zh_4k',
                'Length1000Depth10_4needle_zh_4k',
                'Length1000Depth15_4needle_zh_4k',
                'Length1000Depth21_4needle_zh_4k',
                'Length1000Depth26_4needle_zh_4k',
                'Length1000Depth31_4needle_zh_4k',
                'Length1000Depth36_4needle_zh_4k',
                'Length1000Depth42_4needle_zh_4k',
                'Length1000Depth47_4needle_zh_4k',
                'Length1000Depth52_4needle_zh_4k',
                'Length1000Depth57_4needle_zh_4k',
                'Length1000Depth63_4needle_zh_4k',
                'Length1000Depth68_4needle_zh_4k',
                'Length1000Depth73_4needle_zh_4k',
                'Length1000Depth78_4needle_zh_4k',
                'Length1000Depth84_4needle_zh_4k',
                'Length1000Depth89_4needle_zh_4k',
                'Length1000Depth94_4needle_zh_4k',
                'Length1000Depth100_4needle_zh_4k',
                'Length2000Depth0_4needle_zh_4k',
                'Length2000Depth5_4needle_zh_4k',
                'Length2000Depth10_4needle_zh_4k',
                'Length2000Depth15_4needle_zh_4k',
                'Length2000Depth21_4needle_zh_4k',
                'Length2000Depth26_4needle_zh_4k',
                'Length2000Depth31_4needle_zh_4k',
                'Length2000Depth36_4needle_zh_4k',
                'Length2000Depth42_4needle_zh_4k',
                'Length2000Depth47_4needle_zh_4k',
                'Length2000Depth52_4needle_zh_4k',
                'Length2000Depth57_4needle_zh_4k',
                'Length2000Depth63_4needle_zh_4k',
                'Length2000Depth68_4needle_zh_4k',
                'Length2000Depth73_4needle_zh_4k',
                'Length2000Depth78_4needle_zh_4k',
                'Length2000Depth84_4needle_zh_4k',
                'Length2000Depth89_4needle_zh_4k',
                'Length2000Depth94_4needle_zh_4k',
                'Length2000Depth100_4needle_zh_4k',
                'Length3000Depth0_4needle_zh_4k',
                'Length3000Depth5_4needle_zh_4k',
                'Length3000Depth10_4needle_zh_4k',
                'Length3000Depth15_4needle_zh_4k',
                'Length3000Depth21_4needle_zh_4k',
                'Length3000Depth26_4needle_zh_4k',
                'Length3000Depth31_4needle_zh_4k',
                'Length3000Depth36_4needle_zh_4k',
                'Length3000Depth42_4needle_zh_4k',
                'Length3000Depth47_4needle_zh_4k',
                'Length3000Depth52_4needle_zh_4k',
                'Length3000Depth57_4needle_zh_4k',
                'Length3000Depth63_4needle_zh_4k',
                'Length3000Depth68_4needle_zh_4k',
                'Length3000Depth73_4needle_zh_4k',
                'Length3000Depth78_4needle_zh_4k',
                'Length3000Depth84_4needle_zh_4k',
                'Length3000Depth89_4needle_zh_4k',
                'Length3000Depth94_4needle_zh_4k',
                'Length3000Depth100_4needle_zh_4k',
                'Length4000Depth0_4needle_zh_4k',
                'Length4000Depth5_4needle_zh_4k',
                'Length4000Depth10_4needle_zh_4k',
                'Length4000Depth15_4needle_zh_4k',
                'Length4000Depth21_4needle_zh_4k',
                'Length4000Depth26_4needle_zh_4k',
                'Length4000Depth31_4needle_zh_4k',
                'Length4000Depth36_4needle_zh_4k',
                'Length4000Depth42_4needle_zh_4k',
                'Length4000Depth47_4needle_zh_4k',
                'Length4000Depth52_4needle_zh_4k',
                'Length4000Depth57_4needle_zh_4k',
                'Length4000Depth63_4needle_zh_4k',
                'Length4000Depth68_4needle_zh_4k',
                'Length4000Depth73_4needle_zh_4k',
                'Length4000Depth78_4needle_zh_4k',
                'Length4000Depth84_4needle_zh_4k',
                'Length4000Depth89_4needle_zh_4k',
                'Length4000Depth94_4needle_zh_4k',
                'Length4000Depth100_4needle_zh_4k',
                'Length1000Depth0_5needle_zh_4k',
                'Length1000Depth5_5needle_zh_4k',
                'Length1000Depth10_5needle_zh_4k',
                'Length1000Depth15_5needle_zh_4k',
                'Length1000Depth21_5needle_zh_4k',
                'Length1000Depth26_5needle_zh_4k',
                'Length1000Depth31_5needle_zh_4k',
                'Length1000Depth36_5needle_zh_4k',
                'Length1000Depth42_5needle_zh_4k',
                'Length1000Depth47_5needle_zh_4k',
                'Length1000Depth52_5needle_zh_4k',
                'Length1000Depth57_5needle_zh_4k',
                'Length1000Depth63_5needle_zh_4k',
                'Length1000Depth68_5needle_zh_4k',
                'Length1000Depth73_5needle_zh_4k',
                'Length1000Depth78_5needle_zh_4k',
                'Length1000Depth84_5needle_zh_4k',
                'Length1000Depth89_5needle_zh_4k',
                'Length1000Depth94_5needle_zh_4k',
                'Length1000Depth100_5needle_zh_4k',
                'Length2000Depth0_5needle_zh_4k',
                'Length2000Depth5_5needle_zh_4k',
                'Length2000Depth10_5needle_zh_4k',
                'Length2000Depth15_5needle_zh_4k',
                'Length2000Depth21_5needle_zh_4k',
                'Length2000Depth26_5needle_zh_4k',
                'Length2000Depth31_5needle_zh_4k',
                'Length2000Depth36_5needle_zh_4k',
                'Length2000Depth42_5needle_zh_4k',
                'Length2000Depth47_5needle_zh_4k',
                'Length2000Depth52_5needle_zh_4k',
                'Length2000Depth57_5needle_zh_4k',
                'Length2000Depth63_5needle_zh_4k',
                'Length2000Depth68_5needle_zh_4k',
                'Length2000Depth73_5needle_zh_4k',
                'Length2000Depth78_5needle_zh_4k',
                'Length2000Depth84_5needle_zh_4k',
                'Length2000Depth89_5needle_zh_4k',
                'Length2000Depth94_5needle_zh_4k',
                'Length2000Depth100_5needle_zh_4k',
                'Length3000Depth0_5needle_zh_4k',
                'Length3000Depth5_5needle_zh_4k',
                'Length3000Depth10_5needle_zh_4k',
                'Length3000Depth15_5needle_zh_4k',
                'Length3000Depth21_5needle_zh_4k',
                'Length3000Depth26_5needle_zh_4k',
                'Length3000Depth31_5needle_zh_4k',
                'Length3000Depth36_5needle_zh_4k',
                'Length3000Depth42_5needle_zh_4k',
                'Length3000Depth47_5needle_zh_4k',
                'Length3000Depth52_5needle_zh_4k',
                'Length3000Depth57_5needle_zh_4k',
                'Length3000Depth63_5needle_zh_4k',
                'Length3000Depth68_5needle_zh_4k',
                'Length3000Depth73_5needle_zh_4k',
                'Length3000Depth78_5needle_zh_4k',
                'Length3000Depth84_5needle_zh_4k',
                'Length3000Depth89_5needle_zh_4k',
                'Length3000Depth94_5needle_zh_4k',
                'Length3000Depth100_5needle_zh_4k',
                'Length4000Depth0_5needle_zh_4k',
                'Length4000Depth5_5needle_zh_4k',
                'Length4000Depth10_5needle_zh_4k',
                'Length4000Depth15_5needle_zh_4k',
                'Length4000Depth21_5needle_zh_4k',
                'Length4000Depth26_5needle_zh_4k',
                'Length4000Depth31_5needle_zh_4k',
                'Length4000Depth36_5needle_zh_4k',
                'Length4000Depth42_5needle_zh_4k',
                'Length4000Depth47_5needle_zh_4k',
                'Length4000Depth52_5needle_zh_4k',
                'Length4000Depth57_5needle_zh_4k',
                'Length4000Depth63_5needle_zh_4k',
                'Length4000Depth68_5needle_zh_4k',
                'Length4000Depth73_5needle_zh_4k',
                'Length4000Depth78_5needle_zh_4k',
                'Length4000Depth84_5needle_zh_4k',
                'Length4000Depth89_5needle_zh_4k',
                'Length4000Depth94_5needle_zh_4k',
                'Length4000Depth100_5needle_zh_4k',
                ]),
        dict(name='Single-Needle-Retrieval(S-RT)',
            subsets=[
                'Length1000Depth0_origin_en_4k',
                'Length1000Depth5_origin_en_4k',
                'Length1000Depth10_origin_en_4k',
                'Length1000Depth15_origin_en_4k',
                'Length1000Depth21_origin_en_4k',
                'Length1000Depth26_origin_en_4k',
                'Length1000Depth31_origin_en_4k',
                'Length1000Depth36_origin_en_4k',
                'Length1000Depth42_origin_en_4k',
                'Length1000Depth47_origin_en_4k',
                'Length1000Depth52_origin_en_4k',
                'Length1000Depth57_origin_en_4k',
                'Length1000Depth63_origin_en_4k',
                'Length1000Depth68_origin_en_4k',
                'Length1000Depth73_origin_en_4k',
                'Length1000Depth78_origin_en_4k',
                'Length1000Depth84_origin_en_4k',
                'Length1000Depth89_origin_en_4k',
                'Length1000Depth94_origin_en_4k',
                'Length1000Depth100_origin_en_4k',
                'Length2000Depth0_origin_en_4k',
                'Length2000Depth5_origin_en_4k',
                'Length2000Depth10_origin_en_4k',
                'Length2000Depth15_origin_en_4k',
                'Length2000Depth21_origin_en_4k',
                'Length2000Depth26_origin_en_4k',
                'Length2000Depth31_origin_en_4k',
                'Length2000Depth36_origin_en_4k',
                'Length2000Depth42_origin_en_4k',
                'Length2000Depth47_origin_en_4k',
                'Length2000Depth52_origin_en_4k',
                'Length2000Depth57_origin_en_4k',
                'Length2000Depth63_origin_en_4k',
                'Length2000Depth68_origin_en_4k',
                'Length2000Depth73_origin_en_4k',
                'Length2000Depth78_origin_en_4k',
                'Length2000Depth84_origin_en_4k',
                'Length2000Depth89_origin_en_4k',
                'Length2000Depth94_origin_en_4k',
                'Length2000Depth100_origin_en_4k',
                'Length3000Depth0_origin_en_4k',
                'Length3000Depth5_origin_en_4k',
                'Length3000Depth10_origin_en_4k',
                'Length3000Depth15_origin_en_4k',
                'Length3000Depth21_origin_en_4k',
                'Length3000Depth26_origin_en_4k',
                'Length3000Depth31_origin_en_4k',
                'Length3000Depth36_origin_en_4k',
                'Length3000Depth42_origin_en_4k',
                'Length3000Depth47_origin_en_4k',
                'Length3000Depth52_origin_en_4k',
                'Length3000Depth57_origin_en_4k',
                'Length3000Depth63_origin_en_4k',
                'Length3000Depth68_origin_en_4k',
                'Length3000Depth73_origin_en_4k',
                'Length3000Depth78_origin_en_4k',
                'Length3000Depth84_origin_en_4k',
                'Length3000Depth89_origin_en_4k',
                'Length3000Depth94_origin_en_4k',
                'Length3000Depth100_origin_en_4k',
                'Length4000Depth0_origin_en_4k',
                'Length4000Depth5_origin_en_4k',
                'Length4000Depth10_origin_en_4k',
                'Length4000Depth15_origin_en_4k',
                'Length4000Depth21_origin_en_4k',
                'Length4000Depth26_origin_en_4k',
                'Length4000Depth31_origin_en_4k',
                'Length4000Depth36_origin_en_4k',
                'Length4000Depth42_origin_en_4k',
                'Length4000Depth47_origin_en_4k',
                'Length4000Depth52_origin_en_4k',
                'Length4000Depth57_origin_en_4k',
                'Length4000Depth63_origin_en_4k',
                'Length4000Depth68_origin_en_4k',
                'Length4000Depth73_origin_en_4k',
                'Length4000Depth78_origin_en_4k',
                'Length4000Depth84_origin_en_4k',
                'Length4000Depth89_origin_en_4k',
                'Length4000Depth94_origin_en_4k',
                'Length4000Depth100_origin_en_4k',
                'Length1000Depth0_origin_zh_4k',
                'Length1000Depth5_origin_zh_4k',
                'Length1000Depth10_origin_zh_4k',
                'Length1000Depth15_origin_zh_4k',
                'Length1000Depth21_origin_zh_4k',
                'Length1000Depth26_origin_zh_4k',
                'Length1000Depth31_origin_zh_4k',
                'Length1000Depth36_origin_zh_4k',
                'Length1000Depth42_origin_zh_4k',
                'Length1000Depth47_origin_zh_4k',
                'Length1000Depth52_origin_zh_4k',
                'Length1000Depth57_origin_zh_4k',
                'Length1000Depth63_origin_zh_4k',
                'Length1000Depth68_origin_zh_4k',
                'Length1000Depth73_origin_zh_4k',
                'Length1000Depth78_origin_zh_4k',
                'Length1000Depth84_origin_zh_4k',
                'Length1000Depth89_origin_zh_4k',
                'Length1000Depth94_origin_zh_4k',
                'Length1000Depth100_origin_zh_4k',
                'Length2000Depth0_origin_zh_4k',
                'Length2000Depth5_origin_zh_4k',
                'Length2000Depth10_origin_zh_4k',
                'Length2000Depth15_origin_zh_4k',
                'Length2000Depth21_origin_zh_4k',
                'Length2000Depth26_origin_zh_4k',
                'Length2000Depth31_origin_zh_4k',
                'Length2000Depth36_origin_zh_4k',
                'Length2000Depth42_origin_zh_4k',
                'Length2000Depth47_origin_zh_4k',
                'Length2000Depth52_origin_zh_4k',
                'Length2000Depth57_origin_zh_4k',
                'Length2000Depth63_origin_zh_4k',
                'Length2000Depth68_origin_zh_4k',
                'Length2000Depth73_origin_zh_4k',
                'Length2000Depth78_origin_zh_4k',
                'Length2000Depth84_origin_zh_4k',
                'Length2000Depth89_origin_zh_4k',
                'Length2000Depth94_origin_zh_4k',
                'Length2000Depth100_origin_zh_4k',
                'Length3000Depth0_origin_zh_4k',
                'Length3000Depth5_origin_zh_4k',
                'Length3000Depth10_origin_zh_4k',
                'Length3000Depth15_origin_zh_4k',
                'Length3000Depth21_origin_zh_4k',
                'Length3000Depth26_origin_zh_4k',
                'Length3000Depth31_origin_zh_4k',
                'Length3000Depth36_origin_zh_4k',
                'Length3000Depth42_origin_zh_4k',
                'Length3000Depth47_origin_zh_4k',
                'Length3000Depth52_origin_zh_4k',
                'Length3000Depth57_origin_zh_4k',
                'Length3000Depth63_origin_zh_4k',
                'Length3000Depth68_origin_zh_4k',
                'Length3000Depth73_origin_zh_4k',
                'Length3000Depth78_origin_zh_4k',
                'Length3000Depth84_origin_zh_4k',
                'Length3000Depth89_origin_zh_4k',
                'Length3000Depth94_origin_zh_4k',
                'Length3000Depth100_origin_zh_4k',
                'Length4000Depth0_origin_zh_4k',
                'Length4000Depth5_origin_zh_4k',
                'Length4000Depth10_origin_zh_4k',
                'Length4000Depth15_origin_zh_4k',
                'Length4000Depth21_origin_zh_4k',
                'Length4000Depth26_origin_zh_4k',
                'Length4000Depth31_origin_zh_4k',
                'Length4000Depth36_origin_zh_4k',
                'Length4000Depth42_origin_zh_4k',
                'Length4000Depth47_origin_zh_4k',
                'Length4000Depth52_origin_zh_4k',
                'Length4000Depth57_origin_zh_4k',
                'Length4000Depth63_origin_zh_4k',
                'Length4000Depth68_origin_zh_4k',
                'Length4000Depth73_origin_zh_4k',
                'Length4000Depth78_origin_zh_4k',
                'Length4000Depth84_origin_zh_4k',
                'Length4000Depth89_origin_zh_4k',
                'Length4000Depth94_origin_zh_4k',
                'Length4000Depth100_origin_zh_4k',
                ]),
        dict(name='Single-Needle-Retrieval-EN',
            subsets=[
                'Length1000Depth0_origin_en_4k',
                'Length1000Depth5_origin_en_4k',
                'Length1000Depth10_origin_en_4k',
                'Length1000Depth15_origin_en_4k',
                'Length1000Depth21_origin_en_4k',
                'Length1000Depth26_origin_en_4k',
                'Length1000Depth31_origin_en_4k',
                'Length1000Depth36_origin_en_4k',
                'Length1000Depth42_origin_en_4k',
                'Length1000Depth47_origin_en_4k',
                'Length1000Depth52_origin_en_4k',
                'Length1000Depth57_origin_en_4k',
                'Length1000Depth63_origin_en_4k',
                'Length1000Depth68_origin_en_4k',
                'Length1000Depth73_origin_en_4k',
                'Length1000Depth78_origin_en_4k',
                'Length1000Depth84_origin_en_4k',
                'Length1000Depth89_origin_en_4k',
                'Length1000Depth94_origin_en_4k',
                'Length1000Depth100_origin_en_4k',
                'Length2000Depth0_origin_en_4k',
                'Length2000Depth5_origin_en_4k',
                'Length2000Depth10_origin_en_4k',
                'Length2000Depth15_origin_en_4k',
                'Length2000Depth21_origin_en_4k',
                'Length2000Depth26_origin_en_4k',
                'Length2000Depth31_origin_en_4k',
                'Length2000Depth36_origin_en_4k',
                'Length2000Depth42_origin_en_4k',
                'Length2000Depth47_origin_en_4k',
                'Length2000Depth52_origin_en_4k',
                'Length2000Depth57_origin_en_4k',
                'Length2000Depth63_origin_en_4k',
                'Length2000Depth68_origin_en_4k',
                'Length2000Depth73_origin_en_4k',
                'Length2000Depth78_origin_en_4k',
                'Length2000Depth84_origin_en_4k',
                'Length2000Depth89_origin_en_4k',
                'Length2000Depth94_origin_en_4k',
                'Length2000Depth100_origin_en_4k',
                'Length3000Depth0_origin_en_4k',
                'Length3000Depth5_origin_en_4k',
                'Length3000Depth10_origin_en_4k',
                'Length3000Depth15_origin_en_4k',
                'Length3000Depth21_origin_en_4k',
                'Length3000Depth26_origin_en_4k',
                'Length3000Depth31_origin_en_4k',
                'Length3000Depth36_origin_en_4k',
                'Length3000Depth42_origin_en_4k',
                'Length3000Depth47_origin_en_4k',
                'Length3000Depth52_origin_en_4k',
                'Length3000Depth57_origin_en_4k',
                'Length3000Depth63_origin_en_4k',
                'Length3000Depth68_origin_en_4k',
                'Length3000Depth73_origin_en_4k',
                'Length3000Depth78_origin_en_4k',
                'Length3000Depth84_origin_en_4k',
                'Length3000Depth89_origin_en_4k',
                'Length3000Depth94_origin_en_4k',
                'Length3000Depth100_origin_en_4k',
                'Length4000Depth0_origin_en_4k',
                'Length4000Depth5_origin_en_4k',
                'Length4000Depth10_origin_en_4k',
                'Length4000Depth15_origin_en_4k',
                'Length4000Depth21_origin_en_4k',
                'Length4000Depth26_origin_en_4k',
                'Length4000Depth31_origin_en_4k',
                'Length4000Depth36_origin_en_4k',
                'Length4000Depth42_origin_en_4k',
                'Length4000Depth47_origin_en_4k',
                'Length4000Depth52_origin_en_4k',
                'Length4000Depth57_origin_en_4k',
                'Length4000Depth63_origin_en_4k',
                'Length4000Depth68_origin_en_4k',
                'Length4000Depth73_origin_en_4k',
                'Length4000Depth78_origin_en_4k',
                'Length4000Depth84_origin_en_4k',
                'Length4000Depth89_origin_en_4k',
                'Length4000Depth94_origin_en_4k',
                'Length4000Depth100_origin_en_4k',
                ]),
        dict(name='Single-Needle-Retrieval-ZH',
            subsets=[
                'Length1000Depth0_origin_zh_4k',
                'Length1000Depth5_origin_zh_4k',
                'Length1000Depth10_origin_zh_4k',
                'Length1000Depth15_origin_zh_4k',
                'Length1000Depth21_origin_zh_4k',
                'Length1000Depth26_origin_zh_4k',
                'Length1000Depth31_origin_zh_4k',
                'Length1000Depth36_origin_zh_4k',
                'Length1000Depth42_origin_zh_4k',
                'Length1000Depth47_origin_zh_4k',
                'Length1000Depth52_origin_zh_4k',
                'Length1000Depth57_origin_zh_4k',
                'Length1000Depth63_origin_zh_4k',
                'Length1000Depth68_origin_zh_4k',
                'Length1000Depth73_origin_zh_4k',
                'Length1000Depth78_origin_zh_4k',
                'Length1000Depth84_origin_zh_4k',
                'Length1000Depth89_origin_zh_4k',
                'Length1000Depth94_origin_zh_4k',
                'Length1000Depth100_origin_zh_4k',
                'Length2000Depth0_origin_zh_4k',
                'Length2000Depth5_origin_zh_4k',
                'Length2000Depth10_origin_zh_4k',
                'Length2000Depth15_origin_zh_4k',
                'Length2000Depth21_origin_zh_4k',
                'Length2000Depth26_origin_zh_4k',
                'Length2000Depth31_origin_zh_4k',
                'Length2000Depth36_origin_zh_4k',
                'Length2000Depth42_origin_zh_4k',
                'Length2000Depth47_origin_zh_4k',
                'Length2000Depth52_origin_zh_4k',
                'Length2000Depth57_origin_zh_4k',
                'Length2000Depth63_origin_zh_4k',
                'Length2000Depth68_origin_zh_4k',
                'Length2000Depth73_origin_zh_4k',
                'Length2000Depth78_origin_zh_4k',
                'Length2000Depth84_origin_zh_4k',
                'Length2000Depth89_origin_zh_4k',
                'Length2000Depth94_origin_zh_4k',
                'Length2000Depth100_origin_zh_4k',
                'Length3000Depth0_origin_zh_4k',
                'Length3000Depth5_origin_zh_4k',
                'Length3000Depth10_origin_zh_4k',
                'Length3000Depth15_origin_zh_4k',
                'Length3000Depth21_origin_zh_4k',
                'Length3000Depth26_origin_zh_4k',
                'Length3000Depth31_origin_zh_4k',
                'Length3000Depth36_origin_zh_4k',
                'Length3000Depth42_origin_zh_4k',
                'Length3000Depth47_origin_zh_4k',
                'Length3000Depth52_origin_zh_4k',
                'Length3000Depth57_origin_zh_4k',
                'Length3000Depth63_origin_zh_4k',
                'Length3000Depth68_origin_zh_4k',
                'Length3000Depth73_origin_zh_4k',
                'Length3000Depth78_origin_zh_4k',
                'Length3000Depth84_origin_zh_4k',
                'Length3000Depth89_origin_zh_4k',
                'Length3000Depth94_origin_zh_4k',
                'Length3000Depth100_origin_zh_4k',
                'Length4000Depth0_origin_zh_4k',
                'Length4000Depth5_origin_zh_4k',
                'Length4000Depth10_origin_zh_4k',
                'Length4000Depth15_origin_zh_4k',
                'Length4000Depth21_origin_zh_4k',
                'Length4000Depth26_origin_zh_4k',
                'Length4000Depth31_origin_zh_4k',
                'Length4000Depth36_origin_zh_4k',
                'Length4000Depth42_origin_zh_4k',
                'Length4000Depth47_origin_zh_4k',
                'Length4000Depth52_origin_zh_4k',
                'Length4000Depth57_origin_zh_4k',
                'Length4000Depth63_origin_zh_4k',
                'Length4000Depth68_origin_zh_4k',
                'Length4000Depth73_origin_zh_4k',
                'Length4000Depth78_origin_zh_4k',
                'Length4000Depth84_origin_zh_4k',
                'Length4000Depth89_origin_zh_4k',
                'Length4000Depth94_origin_zh_4k',
                'Length4000Depth100_origin_zh_4k',
                ]),
        dict(name='Multi-Needle-Retrieval(M-RT)',
            subsets=[
                'Length1000_parallel_en_4k',
                'Length2000_parallel_en_4k',
                'Length3000_parallel_en_4k',
                'Length4000_parallel_en_4k',
                'Length1000_parallel_zh_4k',
                'Length2000_parallel_zh_4k',
                'Length3000_parallel_zh_4k',
                'Length4000_parallel_zh_4k',
                ]),
        dict(name='Multi-Needle-Retrieval-EN',
            subsets=[
                'Length1000_parallel_en_4k',
                'Length2000_parallel_en_4k',
                'Length3000_parallel_en_4k',
                'Length4000_parallel_en_4k',
                ]),
        dict(name='Multi-Needle-Retrieval-ZH',
            subsets=[
                'Length1000_parallel_zh_4k',
                'Length2000_parallel_zh_4k',
                'Length3000_parallel_zh_4k',
                'Length4000_parallel_zh_4k',
                ]),
        dict(name='NeedleBench-Overall-Score',
            subsets=[
                [
                        'Single-Needle-Retrieval(S-RT)',
                        'naive_average',
                        ],
                [
                        'Multi-Needle-Reasoning(M-RS)',
                        'naive_average',
                        ],
                [
                        'Multi-Needle-Retrieval(M-RT)',
                        'average_score',
                        ],
                ],
            weights=dict(
                {'Multi-Needle-Reasoning(M-RS)': 0.3,
                'Multi-Needle-Retrieval(M-RT)': 0.3,
                'Single-Needle-Retrieval(S-RT)': 0.4})),
        ],
    type='opencompass.summarizers.needlebench.NeedleBenchSummarizer')
work_dir='./outputs/needlebench/20240518_012842'